{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nimport { ContainerErrorType } from \"@fluidframework/container-definitions\";\nimport { LoggingError } from \"@fluidframework/telemetry-utils\";\nfunction messageFromError(error) {\n  var _a;\n  if (typeof ((_a = error) === null || _a === void 0 ? void 0 : _a.message) === \"string\") {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return error.message;\n  }\n  return `${error}`;\n}\n/**\n * Generic error\n */\nexport class GenericError extends LoggingError {\n  constructor(errorMessage, error) {\n    super(errorMessage);\n    this.error = error;\n    this.errorType = ContainerErrorType.genericError;\n  }\n}\nexport class DataCorruptionError extends LoggingError {\n  constructor(errorMessage, props) {\n    super(errorMessage, props);\n    this.errorType = ContainerErrorType.dataCorruptionError;\n    this.canRetry = false;\n  }\n}\n/**\n * Convert the error into one of the error types.\n * @param error - Error to be converted.\n */\nexport function CreateContainerError(error) {\n  var _a;\n  assert(error !== undefined);\n  if (typeof error === \"object\" && error !== null) {\n    const err = error;\n    if (error.errorType !== undefined && error instanceof LoggingError) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return err;\n    }\n    // Only get properties we know about.\n    // Grabbing all properties will expose PII in telemetry!\n    return new LoggingError(messageFromError(error), {\n      errorType: (_a = error.errorType, _a !== null && _a !== void 0 ? _a : ContainerErrorType.genericError),\n      stack: error.stack\n    });\n  } else if (typeof error === \"string\") {\n    return new GenericError(error, new Error(error));\n  } else {\n    return new GenericError(messageFromError(error), error);\n  }\n}\n//# sourceMappingURL=error.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}