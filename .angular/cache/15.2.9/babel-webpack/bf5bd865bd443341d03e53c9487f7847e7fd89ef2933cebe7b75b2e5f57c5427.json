{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { FluidDataStoreRegistry, ContainerRuntime } from \"@fluidframework/container-runtime\";\nimport { IContainerRuntime } from \"@fluidframework/container-runtime-definitions\";\nimport { buildRuntimeRequestHandler, innerRequestHandler } from \"@fluidframework/request-handler\";\nimport { DependencyContainer } from \"@fluidframework/synthesize\";\n/**\n * BaseContainerRuntimeFactory produces container runtimes with a given data store and service registry, as well as\n * given request handlers.  It can be subclassed to implement a first-time initialization procedure for the containers\n * it creates.\n */\nexport class BaseContainerRuntimeFactory {\n  /**\n   * @param registryEntries - The data store registry for containers produced\n   * @param serviceRegistry - The service registry for containers produced\n   * @param requestHandlers - Request handlers for containers produced\n   * @param runtimeOptions - The runtime options passed to the ContainerRuntime when instantiating it\n   */\n  constructor(registryEntries, providerEntries = [], requestHandlers = [], runtimeOptions) {\n    this.registryEntries = registryEntries;\n    this.providerEntries = providerEntries;\n    this.requestHandlers = requestHandlers;\n    this.runtimeOptions = runtimeOptions;\n    this.registry = new FluidDataStoreRegistry(registryEntries);\n  }\n  get IFluidDataStoreRegistry() {\n    return this.registry;\n  }\n  get IRuntimeFactory() {\n    return this;\n  }\n  /**\n   * {@inheritDoc @fluidframework/container-definitions#IRuntimeFactory.instantiateRuntime}\n   */\n  instantiateRuntime(context) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const parentDependencyContainer = context.scope.IFluidDependencySynthesizer;\n      const dc = new DependencyContainer(parentDependencyContainer);\n      for (const entry of Array.from(_this.providerEntries)) {\n        dc.register(entry.type, entry.provider);\n      }\n      // Create a scope object that passes through everything except for IFluidDependencySynthesizer\n      // which we will replace with the new one we just created.\n      const scope = context.scope;\n      scope.IFluidDependencySynthesizer = dc;\n      const runtime = yield ContainerRuntime.load(context, _this.registryEntries, buildRuntimeRequestHandler(..._this.requestHandlers, innerRequestHandler), _this.runtimeOptions, scope);\n      // we register the runtime so developers of providers can use it in the factory pattern.\n      dc.register(IContainerRuntime, runtime);\n      if (!runtime.existing) {\n        // If it's the first time through.\n        yield _this.containerInitializingFirstTime(runtime);\n      }\n      // This always gets called at the end of initialize on first time or from existing.\n      yield _this.containerHasInitialized(runtime);\n      return runtime;\n    })();\n  }\n  /**\n   * Subclasses may override containerInitializingFirstTime to perform any setup steps at the time the container\n   * is created. This likely includes creating any initial data stores that are expected to be there at the outset.\n   * @param runtime - The container runtime for the container being initialized\n   */\n  containerInitializingFirstTime(runtime) {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Subclasses may override containerHasInitialized to perform any steps after the container has initialized.\n   * This likely includes loading any data stores that are expected to be there at the outset.\n   * @param runtime - The container runtime for the container being initialized\n   */\n  containerHasInitialized(runtime) {\n    return _asyncToGenerator(function* () {})();\n  }\n}\n//# sourceMappingURL=baseContainerRuntimeFactory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}