{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert, fromBase64ToUtf8 } from \"@fluidframework/common-utils\";\nimport { ChildLogger } from \"@fluidframework/telemetry-utils\";\nimport { AttachState } from \"@fluidframework/container-definitions\";\nimport { NonCollabClient, UniversalSequenceNumber } from \"./constants\";\nimport { hasMergeInfo } from \"./snapshotChunks\";\nimport { SnapshotV1 } from \"./snapshotV1\";\nimport { SnapshotLegacy } from \"./snapshotlegacy\";\nexport class SnapshotLoader {\n  constructor(runtime, client, mergeTree, logger, serializer) {\n    this.runtime = runtime;\n    this.client = client;\n    this.mergeTree = mergeTree;\n    this.serializer = serializer;\n    this.specToSegment = spec => {\n      let seg;\n      if (hasMergeInfo(spec)) {\n        seg = this.client.specToSegment(spec.json);\n        // `specToSegment()` initializes `seg` with the LocalClientId.  Overwrite this with\n        // the `spec` client (if specified).  Otherwise overwrite with `NonCollabClient`.\n        seg.clientId = spec.client !== undefined ? this.client.getOrAddShortClientId(spec.client) : NonCollabClient;\n        seg.seq = spec.seq !== undefined ? spec.seq : UniversalSequenceNumber;\n        if (spec.removedSeq !== undefined) {\n          seg.removedSeq = spec.removedSeq;\n        }\n        if (spec.removedClient !== undefined) {\n          seg.removedClientId = this.client.getOrAddShortClientId(spec.removedClient);\n        }\n      } else {\n        seg = this.client.specToSegment(spec);\n        seg.seq = UniversalSequenceNumber;\n        // `specToSegment()` initializes `seg` with the LocalClientId.  We must overwrite this with\n        // `NonCollabClient`.\n        seg.clientId = NonCollabClient;\n      }\n      return seg;\n    };\n    this.logger = ChildLogger.create(logger, \"SnapshotLoader\");\n  }\n  initialize(services) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const headerLoadedP = services.read(SnapshotLegacy.header).then(header => {\n        assert(!!header);\n        return _this.loadHeader(header);\n      });\n      const catchupOpsP = _this.loadBodyAndCatchupOps(headerLoadedP, services);\n      catchupOpsP.catch(err => _this.logger.sendErrorEvent({\n        eventName: \"CatchupOpsLoadFailure\"\n      }, err));\n      yield headerLoadedP;\n      return {\n        catchupOpsP\n      };\n    })();\n  }\n  loadBodyAndCatchupOps(headerChunkP, services) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const blobsP = services.list(\"\");\n      const headerChunk = yield headerChunkP;\n      // TODO we shouldn't need to wait on the body being complete to finish initialization.\n      // To fully support this we need to be able to process inbound ops for pending segments.\n      yield _this2.loadBody(headerChunk, services);\n      const blobs = yield blobsP;\n      if (blobs.length === headerChunk.headerMetadata.orderedChunkMetadata.length + 1) {\n        headerChunk.headerMetadata.orderedChunkMetadata.forEach(md => blobs.splice(blobs.indexOf(md.id), 1));\n        assert(blobs.length === 1, `There should be only one blob with catch up ops: ${blobs.length}`);\n        // TODO: The 'Snapshot.catchupOps' tree entry is purely for backwards compatibility.\n        //       (See https://github.com/microsoft/FluidFramework/issues/84)\n        return _this2.loadCatchupOps(services.read(blobs[0]));\n      } else if (blobs.length !== headerChunk.headerMetadata.orderedChunkMetadata.length) {\n        throw new Error(\"Unexpected blobs in snapshot\");\n      }\n      return [];\n    })();\n  }\n  loadHeader(header) {\n    var _a;\n    const chunk = SnapshotV1.processChunk(SnapshotLegacy.header, header, this.logger, this.mergeTree.options, this.serializer);\n    const segs = chunk.segments.map(this.specToSegment);\n    this.mergeTree.reloadFromSegments(segs);\n    if (chunk.headerMetadata === undefined) {\n      throw new Error(\"header metadata not available\");\n    }\n    // If we load a detached container from snapshot, then we don't supply a default clientId\n    // because we don't want to start collaboration.\n    if (this.runtime.attachState !== AttachState.Detached) {\n      // specify a default client id, \"snapshot\" here as we\n      // should enter collaboration/op sending mode if we load\n      // a snapshot in any case (summary or attach message)\n      // once we get a client id this will be called with that\n      // clientId in the connected event\n      this.client.startOrUpdateCollaboration((_a = this.runtime.clientId, _a !== null && _a !== void 0 ? _a : \"snapshot\"),\n      // TODO: Make 'minSeq' non-optional once the new snapshot format becomes the default?\n      //       (See https://github.com/microsoft/FluidFramework/issues/84)\n      /* minSeq: */\n      chunk.headerMetadata.minSequenceNumber !== undefined ? chunk.headerMetadata.minSequenceNumber : chunk.headerMetadata.sequenceNumber, /* currentSeq: */chunk.headerMetadata.sequenceNumber);\n    }\n    return chunk;\n  }\n  loadBody(chunk1, services) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.runtime.logger.shipAssert(chunk1.length <= chunk1.headerMetadata.totalLength, {\n        eventName: \"Mismatch in totalLength\"\n      });\n      _this3.runtime.logger.shipAssert(chunk1.segmentCount <= chunk1.headerMetadata.totalSegmentCount, {\n        eventName: \"Mismatch in totalSegmentCount\"\n      });\n      if (chunk1.segmentCount === chunk1.headerMetadata.totalSegmentCount) {\n        return;\n      }\n      const segs = [];\n      let lengthSofar = chunk1.length;\n      for (let chunkIndex = 1; chunkIndex < chunk1.headerMetadata.orderedChunkMetadata.length; chunkIndex++) {\n        const chunk = yield SnapshotV1.loadChunk(services, chunk1.headerMetadata.orderedChunkMetadata[chunkIndex].id, _this3.logger, _this3.mergeTree.options, _this3.serializer);\n        lengthSofar += chunk.length;\n        // Deserialize each chunk segment and append it to the end of the MergeTree.\n        segs.push(...chunk.segments.map(_this3.specToSegment));\n      }\n      _this3.runtime.logger.shipAssert(lengthSofar === chunk1.headerMetadata.totalLength, {\n        eventName: \"Mismatch in totalLength\"\n      });\n      _this3.runtime.logger.shipAssert(chunk1.segmentCount + segs.length === chunk1.headerMetadata.totalSegmentCount, {\n        eventName: \"Mismatch in totalSegmentCount\"\n      });\n      // Helper to insert segments at the end of the MergeTree.\n      const mergeTree = _this3.mergeTree;\n      const append = (segments, cli, seq) => {\n        mergeTree.insertSegments(mergeTree.root.cachedLength, segments, /* refSeq: */UniversalSequenceNumber, cli, seq, undefined);\n      };\n      // Helpers to batch-insert segments that are below the min seq\n      const batch = [];\n      const flushBatch = () => {\n        if (batch.length > 0) {\n          append(batch, NonCollabClient, UniversalSequenceNumber);\n        }\n      };\n      for (const seg of segs) {\n        const cli = seg.clientId;\n        const seq = seg.seq;\n        // If the segment can be batch inserted, add it to the 'batch' array.  Otherwise, flush\n        // any batched segments and then insert the current segment individually.\n        if (cli === NonCollabClient && seq === UniversalSequenceNumber) {\n          batch.push(seg);\n        } else {\n          flushBatch();\n          append([seg], cli, seq);\n        }\n      }\n      flushBatch();\n    })();\n  }\n  /**\n   * If loading from a snapshot, get the catchup messages.\n   * @param rawMessages - The messages in original encoding\n   * @returns The decoded messages, but handles aren't parsed.  Matches the format that will be passed in\n   * SharedObject.processCore.\n   */\n  loadCatchupOps(rawMessages) {\n    return _asyncToGenerator(function* () {\n      const utf8 = fromBase64ToUtf8(yield rawMessages);\n      return JSON.parse(utf8);\n    })();\n  }\n}\n//# sourceMappingURL=snapshotLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}