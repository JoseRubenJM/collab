{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { parse } from \"url\";\nimport { assert } from \"@fluidframework/common-utils\";\nimport { ensureFluidResolvedUrl, getDocAttributesFromProtocolSummary, getQuorumValuesFromProtocolSummary } from \"@fluidframework/driver-utils\";\nimport Axios from \"axios\";\nimport { DocumentService } from \"./documentService\";\nimport { DocumentService2 } from \"./documentService2\";\nimport { DefaultErrorTracking } from \"./errorTracking\";\n/**\n * Factory for creating the routerlicious document service. Use this if you want to\n * use the routerlicious implementation.\n */\nexport class RouterliciousDocumentServiceFactory {\n  constructor(tokenProvider, useDocumentService2 = false, errorTracking = new DefaultErrorTracking(), disableCache = false, historianApi = true, gitCache = undefined, credentials) {\n    this.tokenProvider = tokenProvider;\n    this.useDocumentService2 = useDocumentService2;\n    this.errorTracking = errorTracking;\n    this.disableCache = disableCache;\n    this.historianApi = historianApi;\n    this.gitCache = gitCache;\n    this.credentials = credentials;\n    this.protocolName = \"fluid:\";\n  }\n  createContainer(createNewSummary, resolvedUrl, logger) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      ensureFluidResolvedUrl(resolvedUrl);\n      assert(!!resolvedUrl.endpoints.ordererUrl);\n      const parsedUrl = parse(resolvedUrl.url);\n      if (!parsedUrl.pathname) {\n        throw new Error(\"Parsed url should contain tenant and doc Id!!\");\n      }\n      const [, tenantId, id] = parsedUrl.pathname.split(\"/\");\n      const protocolSummary = createNewSummary.tree[\".protocol\"];\n      const appSummary = createNewSummary.tree[\".app\"];\n      if (!(protocolSummary && appSummary)) {\n        throw new Error(\"Protocol and App Summary required in the full summary\");\n      }\n      const documentAttributes = getDocAttributesFromProtocolSummary(protocolSummary);\n      const quorumValues = getQuorumValuesFromProtocolSummary(protocolSummary);\n      yield Axios.post(`${resolvedUrl.endpoints.ordererUrl}/documents/${tenantId}`, {\n        id,\n        summary: appSummary,\n        sequenceNumber: documentAttributes.sequenceNumber,\n        values: quorumValues\n      });\n      return _this.createDocumentService(resolvedUrl, logger);\n    })();\n  }\n  /**\n   * Creates the document service after extracting different endpoints URLs from a resolved URL.\n   *\n   * @param resolvedUrl - URL containing different endpoint URLs.\n   * @returns Routerlicious document service.\n   */\n  createDocumentService(resolvedUrl, logger) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      ensureFluidResolvedUrl(resolvedUrl);\n      const fluidResolvedUrl = resolvedUrl;\n      const storageUrl = fluidResolvedUrl.endpoints.storageUrl;\n      const ordererUrl = fluidResolvedUrl.endpoints.ordererUrl;\n      const deltaStorageUrl = fluidResolvedUrl.endpoints.deltaStorageUrl;\n      if (!ordererUrl || !deltaStorageUrl) {\n        throw new Error(`All endpoints urls must be provided. [ordererUrl:${ordererUrl}][deltaStorageUrl:${deltaStorageUrl}]`);\n      }\n      const parsedUrl = parse(fluidResolvedUrl.url);\n      const [, tenantId, documentId] = parsedUrl.pathname.split(\"/\");\n      if (!documentId || !tenantId) {\n        throw new Error(`Couldn't parse documentId and/or tenantId. [documentId:${documentId}][tenantId:${tenantId}]`);\n      }\n      if (_this2.useDocumentService2) {\n        return new DocumentService2(fluidResolvedUrl, ordererUrl, deltaStorageUrl, storageUrl, _this2.errorTracking, _this2.disableCache, _this2.historianApi, _this2.credentials, _this2.tokenProvider, tenantId, documentId);\n      } else {\n        return new DocumentService(fluidResolvedUrl, ordererUrl, deltaStorageUrl, storageUrl, _this2.errorTracking, _this2.disableCache, _this2.historianApi, _this2.credentials, _this2.gitCache, _this2.tokenProvider, tenantId, documentId);\n      }\n    })();\n  }\n}\n//# sourceMappingURL=documentServiceFactory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}