{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { parse } from \"url\";\nimport { fromUtf8ToBase64, Uint8ArrayToString } from \"@fluidframework/common-utils\";\nimport { v4 as uuid } from \"uuid\";\nexport function parseUrl(url) {\n  var _a;\n  const parsed = parse(url, true);\n  if (typeof parsed.pathname !== \"string\") {\n    throw new Error(\"Failed to parse pathname\");\n  }\n  const regex = /^\\/([^/]*\\/[^/]*)(\\/?.*)$/;\n  const match = regex.exec(parsed.pathname);\n  return ((_a = match) === null || _a === void 0 ? void 0 : _a.length) === 3 ? {\n    id: match[1],\n    path: match[2],\n    version: parsed.query.version\n  } : undefined;\n}\nfunction convertProtocolAndAppSummaryToSnapshotTreeCore(summary) {\n  const treeNode = {\n    blobs: {},\n    trees: {},\n    commits: {},\n    id: uuid()\n  };\n  const keys = Object.keys(summary.tree);\n  for (const key of keys) {\n    const summaryObject = summary.tree[key];\n    switch (summaryObject.type) {\n      case 1 /* Tree */:\n        {\n          treeNode.trees[key] = convertProtocolAndAppSummaryToSnapshotTreeCore(summaryObject);\n          break;\n        }\n      case 2 /* Blob */:\n        {\n          const blobId = uuid();\n          treeNode.blobs[key] = blobId;\n          const content = typeof summaryObject.content === \"string\" ? summaryObject.content : Uint8ArrayToString(summaryObject.content, \"base64\");\n          treeNode.blobs[blobId] = fromUtf8ToBase64(content);\n          break;\n        }\n      case 3 /* Handle */:\n        throw new Error(\"No handles should be there in summary in detached container!!\");\n        break;\n      default:\n        {\n          throw new Error(`Unknown tree type ${summaryObject.type}`);\n        }\n    }\n  }\n  return treeNode;\n}\n/**\n * Combine and convert protocol and app summary tree to format which is readable by container while rehydrating.\n * @param protocolSummaryTree - Protocol Summary Tree\n * @param appSummaryTree - App Summary Tree\n */\nexport function convertProtocolAndAppSummaryToSnapshotTree(protocolSummaryTree, appSummaryTree) {\n  const protocolSummaryTreeModified = {\n    type: 1 /* Tree */,\n    tree: {\n      \".protocol\": {\n        type: 1 /* Tree */,\n        tree: Object.assign({}, protocolSummaryTree.tree)\n      }\n    }\n  };\n  const snapshotTree = convertProtocolAndAppSummaryToSnapshotTreeCore(protocolSummaryTreeModified);\n  snapshotTree.trees = Object.assign(Object.assign({}, snapshotTree.trees), convertProtocolAndAppSummaryToSnapshotTreeCore(appSummaryTree).trees);\n  return snapshotTree;\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}