{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { convertSummaryTreeToWholeSummaryTree } from \"./storageUtils\";\n/**\n * Converts summary to snapshot tree and uploads with single snaphot tree payload.\n */\nexport class WholeSummaryUploadManager {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  writeSummaryTree(summaryTree, parentHandle, summaryType, sequenceNumber) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const id = yield _this.writeSummaryTreeCore(parentHandle, summaryTree, summaryType, sequenceNumber !== null && sequenceNumber !== void 0 ? sequenceNumber : 0);\n      if (!id) {\n        throw new Error(`Failed to write summary tree`);\n      }\n      return id;\n    })();\n  }\n  writeSummaryTreeCore(parentHandle, tree, type, sequenceNumber) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const snapshotTree = convertSummaryTreeToWholeSummaryTree(parentHandle, tree, \"\", type === \"channel\" ? \".app\" : \"\");\n      const snapshotPayload = {\n        entries: snapshotTree.entries,\n        message: undefined,\n        sequenceNumber,\n        type\n      };\n      return _this2.manager.createSummary(snapshotPayload).then(response => response.id);\n    })();\n  }\n}\n//# sourceMappingURL=wholeSummaryUploadManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}