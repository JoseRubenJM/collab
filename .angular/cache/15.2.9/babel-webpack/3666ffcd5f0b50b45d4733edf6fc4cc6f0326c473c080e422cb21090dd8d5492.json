{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter } from \"tslib\";\nimport { DataObject, DataObjectFactory } from \"@fluidframework/aqueduct\";\nimport { SharedString } from \"@fluidframework/sequence\";\n/**\n * CollaborativeText uses the React CollaborativeTextArea to load a collaborative HTML <textarea>\n */\nexport class CollaborativeText extends DataObject {\n  constructor() {\n    super(...arguments);\n    this.textKey = \"textKey\";\n  }\n  // root: any;\n  static get Name() {\n    return \"collaborative-textarea\";\n  }\n  static getFactory() {\n    return this.factory;\n  }\n  initializingFirstTime() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Create the SharedString and store the handle in our root SharedDirectory\n      const text = SharedString.create(this.runtime);\n      this.root.set(this.textKey, text.handle);\n    });\n  }\n  hasInitialized() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      // Store the text if we are loading the first time or loading from existing\n      this.text = yield (_a = this.root.get(this.textKey)) === null || _a === void 0 ? void 0 : _a.get();\n    });\n  }\n}\nCollaborativeText.factory = new DataObjectFactory(CollaborativeText.Name, CollaborativeText, [SharedString.getFactory()], {});\n// Export the CollaborativeText factory as fluidExport for the dynamic component loading scenario\nexport const CollaborativeTextInstantiationFactory = CollaborativeText.getFactory();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}