{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"./assert\";\nimport { IsoBuffer } from \"./bufferBrowser\";\nlet insecureContextHashFn;\n/**\n * Set a hashing function to be called in place of hashFile's internal\n * implementation when running under insecure contexts.  Not needed\n * when running under Node.  The internal algorithm should match that the\n * one used internally by hashFile.\n * @param hashFn - The function that should be used in place of hashFile\n */\nexport function setInsecureContextHashFn(hashFn) {\n  insecureContextHashFn = hashFn;\n}\n/**\n * Hash a file. Consistent within a session, but should not be persisted and\n * is not consistent with git.\n * If called under an insecure context for a browser, an override function\n * needs to be set using setInsecureContextHashFn\n *\n * @param file - The contents of the file in a buffer\n * @returns The hash of the content of the buffer\n */\nexport function hashFile(_x) {\n  return _hashFile.apply(this, arguments);\n}\n/**\n * Create a github hash (Github hashes the string with blob and size)\n * Must be called under secure context for browsers\n *\n * @param file - The contents of the file in a buffer\n * @returns The sha1 hash of the content of the buffer with the `blob` prefix and size\n */\nfunction _hashFile() {\n  _hashFile = _asyncToGenerator(function* (file) {\n    // Use the function override if provided\n    if (insecureContextHashFn !== undefined) {\n      assert(crypto.subtle === undefined);\n      return insecureContextHashFn(file);\n    }\n    const hash = yield crypto.subtle.digest(\"SHA-1\", file);\n    const hashArray = new Uint8Array(hash);\n    const hashHex = Array.prototype.map.call(hashArray, function (byte) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return byte.toString(16).padStart(2, \"0\");\n    }).join(\"\");\n    return hashHex;\n  });\n  return _hashFile.apply(this, arguments);\n}\nexport function gitHashFile(_x2) {\n  return _gitHashFile.apply(this, arguments);\n}\n//# sourceMappingURL=hashFileBrowser.js.map\nfunction _gitHashFile() {\n  _gitHashFile = _asyncToGenerator(function* (file) {\n    const size = file.byteLength;\n    const filePrefix = `blob ${size.toString()}${String.fromCharCode(0)}`;\n    const hashBuffer = IsoBuffer.from(filePrefix + file.toString());\n    // hashFile uses sha1; if that changes this will need to change too\n    return hashFile(hashBuffer);\n  });\n  return _gitHashFile.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}