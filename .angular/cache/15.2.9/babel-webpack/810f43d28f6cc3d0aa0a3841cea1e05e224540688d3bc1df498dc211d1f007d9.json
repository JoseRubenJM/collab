{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { AttachState } from \"@fluidframework/container-definitions\";\nimport { generateHandleContextPath } from \"@fluidframework/runtime-utils\";\nexport class ContainerFluidHandleContext {\n  /**\n   * Creates a new ContainerFluidHandleContext.\n   * @param path - The path to this handle relative to the routeContext.\n   * @param runtime - The IRuntime object this context represents.\n   * @param routeContext - The parent IFluidHandleContext that has a route to this handle.\n   */\n  constructor(path, runtime, routeContext) {\n    this.path = path;\n    this.runtime = runtime;\n    this.routeContext = routeContext;\n    this.absolutePath = generateHandleContextPath(path, this.routeContext);\n  }\n  get IFluidRouter() {\n    return this;\n  }\n  get IFluidHandleContext() {\n    return this;\n  }\n  attachGraph() {\n    throw new Error(\"can't attach container runtime form within container!\");\n  }\n  get isAttached() {\n    return this.runtime.attachState !== AttachState.Detached;\n  }\n  resolveHandle(request) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.runtime.resolveHandle(request);\n    })();\n  }\n}\n//# sourceMappingURL=containerHandleContext.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}