{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { generateHandleContextPath } from \"@fluidframework/runtime-utils\";\n/**\n * This class represents blob (long string)\n * This object is used only when creating (writing) new blob and serialization purposes.\n * De-serialization process goes through FluidObjectHandle and request flow:\n * DataObject.request() recognizes requests in the form of `/blobs/<id>`\n * and loads blob.\n */\nexport class BlobHandle {\n  constructor(path, directory, routeContext) {\n    this.path = path;\n    this.directory = directory;\n    this.routeContext = routeContext;\n    this.absolutePath = generateHandleContextPath(path, this.routeContext);\n  }\n  get IFluidRouter() {\n    return this;\n  }\n  get IFluidHandle() {\n    return this;\n  }\n  get isAttached() {\n    return true;\n  }\n  get() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.directory.get(_this.path);\n    })();\n  }\n  attachGraph() {\n    return;\n  }\n  bind(handle) {\n    throw new Error(\"Cannot bind to blob handle\");\n  }\n  request(request) {\n    return _asyncToGenerator(function* () {\n      return {\n        status: 404,\n        mimeType: \"text/plain\",\n        value: `${request.url} not found`\n      };\n    })();\n  }\n}\n//# sourceMappingURL=blobHandle.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}