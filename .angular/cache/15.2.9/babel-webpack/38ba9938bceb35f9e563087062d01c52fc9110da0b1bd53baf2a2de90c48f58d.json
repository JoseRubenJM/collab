{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateUser = exports.generateToken = void 0;\nconst jsrsasign_1 = require(\"jsrsasign\");\nconst uuid_1 = require(\"uuid\");\n/**\n * IMPORTANT: This function is duplicated in ./azure/packages/azure-service-utils/src/generateToken.ts. There is no need\n * for different implementations, so they should be kept in sync if changes are needed.\n *\n * The reason they are duplicated is because we don't want the core Fluid libraries depending on the Azure libraries\n * (enforced by layer-check), but both need to expose this function. The test-runtime-utils library is a test lib, which\n * layer-check (correctly) reuires only be used as a dev dependency. But in the azure case, we want the function\n * exported, so it needs to be sourced from either the package itself or a non-dev dependency.\n *\n * The previous solution to this was to import the function from azure-service-utils into test-runtime-utils, but that\n * no longer works because the azure packages are in a separate release group.\n *\n * If a token needs to be generated on the client side, you should re-use this function. If you need service-side token\n * generation, you should use the function available in the server-services-client package in order to avoid\n * interdependencies between service and client packages.\n */\n/**\n * Generates a {@link https://en.wikipedia.org/wiki/JSON_Web_Token | JSON Web Token} (JWT)\n * to authorize access to a Routerlicious-based Fluid service.\n *\n * @remarks Note: this function uses a browser friendly auth library\n * ({@link https://www.npmjs.com/package/jsrsasign | jsrsasign}) and may only be used in client (browser) context.\n * It is **not** Node.js-compatible.\n *\n * @param tenantId - See {@link @fluidframework/protocol-definitions#ITokenClaims.tenantId}\n * @param key - API key to authenticate user. Must be {@link https://en.wikipedia.org/wiki/UTF-8 | UTF-8}-encoded.\n * @param scopes - See {@link @fluidframework/protocol-definitions#ITokenClaims.scopes}\n * @param documentId - See {@link @fluidframework/protocol-definitions#ITokenClaims.documentId}.\n * If not specified, the token will not be associated with a document, and an empty string will be used.\n * @param user - User with whom generated tokens will be associated.\n * If not specified, the token will not be associated with a user, and a randomly generated mock user will be\n * used instead.\n * See {@link @fluidframework/protocol-definitions#ITokenClaims.user}\n * @param lifetime - Used to generate the {@link @fluidframework/protocol-definitions#ITokenClaims.exp | expiration}.\n * Expiration = now + lifetime.\n * Expressed in seconds.\n * Default: 3600 (1 hour).\n * @param ver - See {@link @fluidframework/protocol-definitions#ITokenClaims.ver}.\n * Default: `1.0`.\n */\nfunction generateToken(tenantId, key, scopes, documentId, user, lifetime = 60 * 60, ver = \"1.0\") {\n  let userClaim = user ? user : generateUser();\n  if (userClaim.id === \"\" || userClaim.id === undefined) {\n    userClaim = generateUser();\n  }\n  // Current time in seconds\n  const now = Math.round(Date.now() / 1000);\n  const docId = documentId !== null && documentId !== void 0 ? documentId : \"\";\n  const claims = {\n    documentId: docId,\n    scopes,\n    tenantId,\n    user: userClaim,\n    iat: now,\n    exp: now + lifetime,\n    ver,\n    jti: (0, uuid_1.v4)()\n  };\n  const utf8Key = {\n    utf8: key\n  };\n  return jsrsasign_1.KJUR.jws.JWS.sign(null, JSON.stringify({\n    alg: \"HS256\",\n    typ: \"JWT\"\n  }), claims, utf8Key);\n}\nexports.generateToken = generateToken;\n/**\n * Generates an arbitrary (\"random\") {@link @fluidframework/protocol-definitions#IUser} by generating a\n * random UUID for its {@link @fluidframework/protocol-definitions#IUser.id} and `name` properties.\n */\nfunction generateUser() {\n  const randomUser = {\n    id: (0, uuid_1.v4)(),\n    name: (0, uuid_1.v4)()\n  };\n  return randomUser;\n}\nexports.generateUser = generateUser;\n//# sourceMappingURL=generateToken.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}