{"ast":null,"code":"import { TypedEventEmitter } from \"@fluidframework/common-utils\";\n/**\n * Event Emitter helper class\n * Any exceptions thrown by listeners will be caught and raised through \"error\" event.\n * Any exception thrown by \"error\" listeners will propagate to the caller.\n */\nexport class EventEmitterWithErrorHandling extends TypedEventEmitter {\n  emit(event, ...args) {\n    if (event === \"error\") {\n      const anyListeners = super.emit(event, ...args);\n      if (!anyListeners) {\n        console.error(\"Nobody is listening for 'error' events\");\n      }\n      return anyListeners;\n    }\n    let result;\n    try {\n      result = super.emit(event, ...args);\n    } catch (error) {\n      result = this.emit(\"error\", error);\n    }\n    return result;\n  }\n}\n//# sourceMappingURL=eventEmitterWithErrorHandling.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}