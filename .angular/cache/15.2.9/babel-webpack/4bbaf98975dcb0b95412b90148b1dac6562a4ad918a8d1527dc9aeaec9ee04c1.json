{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAssertionError = void 0;\nconst assertionShortCodesMap_1 = require(\"./assertionShortCodesMap\");\n/**\n * Validates that an error thrown by our assert() function has the expected message, or a\n * short code that corresponds to that message.\n *\n * @remarks\n * The main use case for this is so tests that expect specific assert() calls to fail can\n * always do comparisons based on the original string message, and work whether they run\n * before the policy-check tool replaces those strings with short codes, or after. Note that\n * it either returns true or throws an error (the behavior expected by NodeJS' `assert.throws()`).\n *\n * @param error - The error object thrown by our `assert()` function. Its `message` property could\n *                be a short code, or the original string message coded into the `asert()`.\n * @param expectedErrorMessage - The message that the error object should match (either explicitly,\n *                               or because it contains a short code which maps to that message).\n * @returns - `true` if the message in the error object that was passed in matches the expected\n *            message. Otherwise it throws an error.\n */\nfunction validateAssertionError(error, expectedErrorMsg) {\n  var _a;\n  const mappedMsg = (_a = assertionShortCodesMap_1.shortCodeMap[error.message]) !== null && _a !== void 0 ? _a : error.message;\n  if (mappedMsg !== expectedErrorMsg) {\n    // This throws an Error instead of an AssertionError because AssertionError would require a dependency on the\n    // node assert library, which we don't want to do for this library because it's used in the browser.\n    throw new Error(`Unexpected assertion thrown: ${error.message} ('${mappedMsg}')`);\n  }\n  return true;\n}\nexports.validateAssertionError = validateAssertionError;\n//# sourceMappingURL=validateAssertionError.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}