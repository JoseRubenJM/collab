{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { DirectoryFactory, MapFactory, SharedDirectory, SharedMap } from \"@fluidframework/map\";\nimport { FluidDataStoreRuntime } from \"@fluidframework/datastore\";\nimport { PureDataObjectFactory } from \"./pureDataObjectFactory\";\n/**\n * DataObjectFactory is the IFluidDataStoreFactory for use with DataObjects.\n * It facilitates DataObject's features (such as its shared directory) by\n * ensuring relevant shared objects etc are available to the factory.\n *\n * Generics:\n * O - represents a type that will define optional providers that will be injected\n * S - the initial state type that the produced data object may take during creation\n */\nexport class DataObjectFactory extends PureDataObjectFactory {\n  constructor(type, ctor, sharedObjects = [], optionalProviders, registryEntries, runtimeFactory = FluidDataStoreRuntime) {\n    const mergedObjects = [...sharedObjects];\n    if (!sharedObjects.find(factory => factory.type === DirectoryFactory.Type)) {\n      // User did not register for directory\n      mergedObjects.push(SharedDirectory.getFactory());\n    }\n    // TODO: Remove SharedMap factory when compatibility with SharedMap DataObject is no longer needed in 0.10\n    if (!sharedObjects.find(factory => factory.type === MapFactory.Type)) {\n      // User did not register for map\n      mergedObjects.push(SharedMap.getFactory());\n    }\n    super(type, ctor, mergedObjects, optionalProviders, registryEntries, runtimeFactory);\n  }\n}\n//# sourceMappingURL=dataObjectFactory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}