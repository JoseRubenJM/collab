{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { fromBase64ToUtf8 } from \"@fluidframework/common-utils\";\n/**\n * Read a blob from IDocumentStorageService, decode it (from \"base64\") and JSON.parse it into object of type T\n *\n * @param storage - the IDocumentStorageService to read from\n * @param id - the id of the blob to read and parse\n * @returns the object that we decoded and JSON.parse\n */\nexport function readAndParse(_x, _x2) {\n  return _readAndParse.apply(this, arguments);\n}\n/**\n * Read a blob from map, decode it (from \"base64\") and JSON.parse it into object of type T\n *\n * @param blobs - the blob map to read from\n * @param id - the id of the blob to read and parse\n * @returns the object that we decoded and JSON.parse\n */\nfunction _readAndParse() {\n  _readAndParse = _asyncToGenerator(function* (storage, id) {\n    const encoded = yield storage.read(id);\n    const decoded = fromBase64ToUtf8(encoded);\n    return JSON.parse(decoded);\n  });\n  return _readAndParse.apply(this, arguments);\n}\nexport function readAndParseFromBlobs(blobs, id) {\n  const encoded = blobs[id];\n  const decoded = fromBase64ToUtf8(encoded);\n  return JSON.parse(decoded);\n}\n//# sourceMappingURL=readAndParse.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}