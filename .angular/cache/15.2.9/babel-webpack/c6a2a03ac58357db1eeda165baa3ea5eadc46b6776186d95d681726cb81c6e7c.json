{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nimport { UnassignedSequenceNumber } from \"./constants\";\nimport * as Properties from \"./properties\";\nexport class SegmentPropertiesManager {\n  constructor(segment) {\n    this.segment = segment;\n  }\n  ackPendingProperties(annotateOp) {\n    if (annotateOp.combiningOp && annotateOp.combiningOp.name === \"rewrite\") {\n      this.pendingRewriteCount--;\n    }\n    for (const key of Object.keys(annotateOp.props)) {\n      if (this.pendingKeyUpdateCount[key] !== undefined) {\n        assert(this.pendingKeyUpdateCount[key] > 0);\n        this.pendingKeyUpdateCount[key]--;\n        if (this.pendingKeyUpdateCount[key] === 0) {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete this.pendingKeyUpdateCount[key];\n        }\n      }\n    }\n  }\n  addProperties(newProps, op, seq, collabWindow) {\n    if (!this.segment.properties) {\n      this.pendingRewriteCount = 0;\n      this.segment.properties = Properties.createMap();\n      this.pendingKeyUpdateCount = Properties.createMap();\n    }\n    const collaborating = collabWindow && collabWindow.collaborating;\n    // There are outstanding local rewrites, so block all non-local changes\n    if (this.pendingRewriteCount > 0 && seq !== UnassignedSequenceNumber && collaborating) {\n      return undefined;\n    }\n    const rewrite = op && op.name === \"rewrite\";\n    const combiningOp = !rewrite ? op ? op : undefined : undefined;\n    const shouldModifyKey = key => {\n      if (seq === UnassignedSequenceNumber || this.pendingKeyUpdateCount[key] === undefined || combiningOp) {\n        return true;\n      }\n      return false;\n    };\n    const deltas = {};\n    if (rewrite) {\n      if (collaborating && seq === UnassignedSequenceNumber) {\n        this.pendingRewriteCount++;\n      }\n      // We are re-writting so delete all the properties\n      // not in the new props\n      for (const key of Object.keys(this.segment.properties)) {\n        if (!newProps[key] && shouldModifyKey(key)) {\n          deltas[key] = this.segment.properties[key];\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete this.segment.properties[key];\n        }\n      }\n    }\n    for (const key of Object.keys(newProps)) {\n      if (collaborating) {\n        if (seq === UnassignedSequenceNumber) {\n          if (this.pendingKeyUpdateCount[key] === undefined) {\n            this.pendingKeyUpdateCount[key] = 0;\n          }\n          this.pendingKeyUpdateCount[key]++;\n        } else if (!shouldModifyKey(key)) {\n          continue;\n        }\n      }\n      const previousValue = this.segment.properties[key];\n      // The delta should be null if undefined, as thats how we encode delete\n      deltas[key] = previousValue === undefined ? null : previousValue;\n      let newValue;\n      if (combiningOp) {\n        newValue = Properties.combine(op, previousValue, newValue, seq);\n      } else {\n        newValue = newProps[key];\n      }\n      if (newValue === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this.segment.properties[key];\n      } else {\n        this.segment.properties[key] = newValue;\n      }\n    }\n    return deltas;\n  }\n  copyTo(leafSegment) {\n    if (this.segment.properties) {\n      leafSegment.properties = Properties.createMap();\n      for (const key of Object.keys(this.segment.properties)) {\n        leafSegment.properties[key] = this.segment.properties[key];\n      }\n      if (this.segment.propertyManager) {\n        leafSegment.propertyManager = new SegmentPropertiesManager(leafSegment);\n        leafSegment.propertyManager.pendingRewriteCount = this.pendingRewriteCount;\n        leafSegment.propertyManager.pendingKeyUpdateCount = Properties.createMap();\n        for (const key of Object.keys(this.pendingKeyUpdateCount)) {\n          leafSegment.propertyManager.pendingKeyUpdateCount[key] = this.pendingKeyUpdateCount[key];\n        }\n      }\n    }\n  }\n  hasPendingProperties() {\n    return this.pendingRewriteCount > 0 || Object.keys(this.pendingKeyUpdateCount).length > 0;\n  }\n}\n//# sourceMappingURL=segmentPropertiesManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}