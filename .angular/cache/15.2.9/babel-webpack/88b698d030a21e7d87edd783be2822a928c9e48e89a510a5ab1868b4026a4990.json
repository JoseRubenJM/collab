{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport querystring from \"querystring\";\nimport { fromUtf8ToBase64 } from \"@fluidframework/common-utils\";\nimport Axios from \"axios\";\nimport * as uuid from \"uuid\";\nimport { readAndParse } from \"@fluidframework/driver-utils\";\n/**\n * Storage service limited to only being able to fetch documents for a specific document\n */\nexport class DocumentDeltaStorageService {\n  constructor(tenantId, id, storageService, documentStorageService) {\n    this.tenantId = tenantId;\n    this.id = id;\n    this.storageService = storageService;\n    this.documentStorageService = documentStorageService;\n    this.logtailSha = this.documentStorageService.logTailSha;\n  }\n  get(from, to) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const opsFromLogTail = _this.logtailSha ? yield readAndParse(_this.documentStorageService, _this.logtailSha) : [];\n      _this.logtailSha = undefined;\n      if (opsFromLogTail.length > 0 && from !== undefined) {\n        return opsFromLogTail.filter(op => op.sequenceNumber > from);\n      }\n      return _this.storageService.get(_this.tenantId, _this.id, from, to);\n    })();\n  }\n}\n/**\n * Provides access to the underlying delta storage on the server for routerlicious driver.\n */\nexport class DeltaStorageService {\n  constructor(url, tokenProvider, logger) {\n    this.url = url;\n    this.tokenProvider = tokenProvider;\n    this.logger = logger;\n  }\n  get(tenantId, id, from, to) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const query = querystring.stringify({\n        from,\n        to\n      });\n      const headers = {\n        \"x-correlation-id\": uuid.v4()\n      };\n      const storageToken = yield _this2.tokenProvider.fetchStorageToken(tenantId, id);\n      if (storageToken) {\n        headers.Authorization = `Basic ${fromUtf8ToBase64(`${tenantId}:${storageToken.jwt}`)}`;\n      }\n      const ops = yield Axios.get(`${_this2.url}?${query}`, {\n        headers\n      });\n      if (_this2.logger) {\n        _this2.logger.sendTelemetryEvent({\n          eventName: \"R11sDriverToServer\",\n          correlationId: headers[\"x-correlation-id\"]\n        });\n      }\n      return ops.data;\n    })();\n  }\n}\n//# sourceMappingURL=deltaStorageService.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}