{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { EventForwarder } from \"@fluidframework/common-utils\";\n/**\n * Proxy to the real IDeltaQueue - used to restrict access\n */\nexport class DeltaQueueProxy extends EventForwarder {\n  constructor(queue) {\n    super(queue);\n    this.queue = queue;\n  }\n  get paused() {\n    return this.queue.paused;\n  }\n  get length() {\n    return this.queue.length;\n  }\n  get idle() {\n    return this.queue.idle;\n  }\n  peek() {\n    return this.queue.peek();\n  }\n  toArray() {\n    return this.queue.toArray();\n  }\n  systemPause() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.pause();\n    })();\n  }\n  pause() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.queue.pause();\n    })();\n  }\n  systemResume() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.resume();\n    })();\n  }\n  resume() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.queue.resume();\n    })();\n  }\n}\n/**\n * Proxy to the real IDeltaManager - used to restrict access\n */\nexport class DeltaManagerProxy extends EventForwarder {\n  constructor(deltaManager) {\n    super(deltaManager);\n    this.deltaManager = deltaManager;\n    this.inbound = new DeltaQueueProxy(deltaManager.inbound);\n    this.outbound = new DeltaQueueProxy(deltaManager.outbound);\n    this.inboundSignal = new DeltaQueueProxy(deltaManager.inboundSignal);\n  }\n  get IDeltaSender() {\n    return this;\n  }\n  get minimumSequenceNumber() {\n    return this.deltaManager.minimumSequenceNumber;\n  }\n  get lastSequenceNumber() {\n    return this.deltaManager.lastSequenceNumber;\n  }\n  get lastKnownSeqNumber() {\n    return this.deltaManager.lastKnownSeqNumber;\n  }\n  // Back-compat: <= 0.18\n  get referenceSequenceNumber() {\n    return this.lastSequenceNumber;\n  }\n  get initialSequenceNumber() {\n    return this.deltaManager.initialSequenceNumber;\n  }\n  get hasCheckpointSequenceNumber() {\n    return this.deltaManager.hasCheckpointSequenceNumber;\n  }\n  get clientDetails() {\n    return this.deltaManager.clientDetails;\n  }\n  get version() {\n    return this.deltaManager.version;\n  }\n  get maxMessageSize() {\n    return this.deltaManager.maxMessageSize;\n  }\n  get serviceConfiguration() {\n    return this.deltaManager.serviceConfiguration;\n  }\n  get active() {\n    return this.deltaManager.active;\n  }\n  get readonly() {\n    return this.deltaManager.readonly;\n  }\n  dispose() {\n    this.inbound.dispose();\n    this.outbound.dispose();\n    this.inboundSignal.dispose();\n    super.dispose();\n  }\n  close() {\n    return this.deltaManager.close();\n  }\n  submitSignal(content) {\n    return this.deltaManager.submitSignal(content);\n  }\n  submit(type, contents, batch, appData) {\n    return this.deltaManager.submit(type, contents, batch, appData);\n  }\n  flush() {\n    return this.deltaManager.flush();\n  }\n}\n//# sourceMappingURL=deltaManagerProxy.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}