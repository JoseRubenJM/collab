{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This handle is used to dynamically load a data store on a remote client and is created on parsing a serialized\n * FluidObjectHandle.\n * This class is used to generate an IFluidHandle when de-serializing Fluid Data Store and SharedObject handles\n * that are stored in SharedObjects. The Data Store or SharedObject corresponding to the IFluidHandle can be\n * retrieved by calling `get` on it.\n */\nexport class RemoteFluidObjectHandle {\n  /**\n   * Creates a new RemoteFluidObjectHandle when parsing an IFluidHandle.\n   * @param absolutePath - The absolute path to the handle from the container runtime.\n   * @param routeContext - The root IFluidHandleContext that has a route to this handle.\n   */\n  constructor(absolutePath, routeContext) {\n    this.absolutePath = absolutePath;\n    this.routeContext = routeContext;\n    this.isAttached = true;\n  }\n  get IFluidRouter() {\n    return this;\n  }\n  get IFluidHandleContext() {\n    return this;\n  }\n  get IFluidHandle() {\n    return this;\n  }\n  /**\n   * @deprecated - This returns the absolute path.\n   */\n  get path() {\n    return this.absolutePath;\n  }\n  get() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.dataStoreP === undefined) {\n        _this.dataStoreP = _this.routeContext.resolveHandle({\n          url: _this.absolutePath\n        }).then(response => response.mimeType === \"fluid/object\" ? response.value : Promise.reject(new Error(response.value)));\n      }\n      return _this.dataStoreP;\n    })();\n  }\n  attachGraph() {\n    return;\n  }\n  bind(handle) {\n    handle.attachGraph();\n  }\n  request(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const dataStore = yield _this2.get();\n      const router = dataStore.IFluidRouter;\n      return router !== undefined ? router.request(request) : {\n        status: 404,\n        mimeType: \"text/plain\",\n        value: `${request.url} not found`\n      };\n    })();\n  }\n}\n//# sourceMappingURL=remoteFluidObjectHandle.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}