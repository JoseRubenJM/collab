{"ast":null,"code":"import { __awaiter } from \"tslib\";\n// import { FluidLoaderService } from './services/fluid-loader.service';\n// import { CollaborativeTextContainerRuntimeFactory } from \"./services/containerCode\";\nimport { TinyliciousClient } from \"@fluidframework/tinylicious-client\";\nimport { SharedMap, SharedString } from 'fluid-framework';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./collaborative-text-area/collaborative-text-area.component\";\nfunction AppComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelement(1, \"app-collaborative-text-area\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"sharedString\", ctx_r0.sharedDescription);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      this.fluidContainer = '';\n      this.schema = {\n        initialObjects: {\n          map1: SharedMap,\n          description: SharedString\n        },\n        dynamicObjectTypes: []\n      };\n    }\n    // constructor(private fluidService: FluidLoaderService) {}\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('init');\n        const client = new TinyliciousClient();\n        // this.fluidContainer = await client.createContainer(this.schema)\n        // const id = await this.fluidContainer.container.attach()\n        // console.log(id)\n        this.fluidContainer = yield client.getContainer('132db1ab-8f80-4ce6-8fde-1b7121c9c0e3', this.schema);\n        this.sharedDescription = yield this.fluidContainer.container.initialObjects.description;\n        console.log(this.sharedDescription);\n        // this.dataObject = await this.fluidService.loadDataObject<CollaborativeText>(CollaborativeTextContainerRuntimeFactory);\n      });\n    }\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[\"class\", \"text-area\", 4, \"ngIf\"], [1, \"text-area\"], [3, \"sharedString\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Collaborative TextArea Fluid Demo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(3, \" This demonstration shows how to use Fluid distributed data structures to sync data across multiple clients. After starting the demo (see the readme for instructions), copy the browser's URL into another tab to create another Fluid client. \");\n        i0.ɵɵelement(4, \"br\")(5, \"br\");\n        i0.ɵɵtext(6, \" After multiple clients are available, type into the text area and notice that all changes are synced across clients. \");\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵtemplate(8, AppComponent_div_8_Template, 2, 1, \"div\", 0);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.sharedDescription);\n      }\n    },\n    dependencies: [i1.NgIf, i2.CollaborativeTextAreaComponent],\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}