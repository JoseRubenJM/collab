{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as MergeTree from \"@fluidframework/merge-tree\";\nimport { pkgVersion } from \"./packageVersion\";\nimport { SharedNumberSequence } from \"./sharedNumberSequence\";\nimport { SharedObjectSequence } from \"./sharedObjectSequence\";\nimport { SubSequence } from \"./sharedSequence\";\nimport { SharedString } from \"./sharedString\";\nexport class SharedStringFactory {\n  static segmentFromSpec(spec) {\n    const maybeText = MergeTree.TextSegment.fromJSONObject(spec);\n    if (maybeText) {\n      return maybeText;\n    }\n    const maybeMarker = MergeTree.Marker.fromJSONObject(spec);\n    if (maybeMarker) {\n      return maybeMarker;\n    }\n  }\n  get type() {\n    return SharedStringFactory.Type;\n  }\n  get attributes() {\n    return SharedStringFactory.Attributes;\n  }\n  /**\n   * {@inheritDoc @fluidframework/datastore-definitions#IChannelFactory.load}\n   */\n  load(runtime, id, services, attributes) {\n    return _asyncToGenerator(function* () {\n      const sharedString = new SharedString(runtime, id, attributes);\n      yield sharedString.load(services);\n      return sharedString;\n    })();\n  }\n  create(document, id) {\n    const sharedString = new SharedString(document, id, this.attributes);\n    sharedString.initializeLocal();\n    return sharedString;\n  }\n}\n// TODO rename back to https://graph.microsoft.com/types/mergeTree/string once paparazzi is able to dynamically\n// load code\nSharedStringFactory.Type = \"https://graph.microsoft.com/types/mergeTree\";\nSharedStringFactory.Attributes = {\n  type: SharedStringFactory.Type,\n  snapshotFormatVersion: \"0.1\",\n  packageVersion: pkgVersion\n};\nexport class SharedObjectSequenceFactory {\n  static segmentFromSpec(segSpec) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const runSegment = segSpec;\n    if (runSegment.items) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const seg = new SubSequence(runSegment.items);\n      if (runSegment.props) {\n        seg.addProperties(runSegment.props);\n      }\n      return seg;\n    }\n  }\n  get type() {\n    return SharedObjectSequenceFactory.Type;\n  }\n  get attributes() {\n    return SharedObjectSequenceFactory.Attributes;\n  }\n  /**\n   * {@inheritDoc @fluidframework/datastore-definitions#IChannelFactory.load}\n   */\n  load(runtime, id, services, attributes) {\n    return _asyncToGenerator(function* () {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const sharedSeq = new SharedObjectSequence(runtime, id, attributes);\n      yield sharedSeq.load(services);\n      return sharedSeq;\n    })();\n  }\n  create(document, id) {\n    const sharedString = new SharedObjectSequence(document, id, this.attributes);\n    sharedString.initializeLocal();\n    return sharedString;\n  }\n}\nSharedObjectSequenceFactory.Type = \"https://graph.microsoft.com/types/mergeTree/object-sequence\";\nSharedObjectSequenceFactory.Attributes = {\n  type: SharedObjectSequenceFactory.Type,\n  snapshotFormatVersion: \"0.1\",\n  packageVersion: pkgVersion\n};\nexport class SharedNumberSequenceFactory {\n  static segmentFromSpec(segSpec) {\n    const runSegment = segSpec;\n    if (runSegment.items) {\n      const seg = new SubSequence(runSegment.items);\n      if (runSegment.props) {\n        seg.addProperties(runSegment.props);\n      }\n      return seg;\n    }\n  }\n  get type() {\n    return SharedNumberSequenceFactory.Type;\n  }\n  get attributes() {\n    return SharedNumberSequenceFactory.Attributes;\n  }\n  /**\n   * {@inheritDoc @fluidframework/datastore-definitions#IChannelFactory.load}\n   */\n  load(runtime, id, services, attributes) {\n    return _asyncToGenerator(function* () {\n      const sharedSeq = new SharedNumberSequence(runtime, id, attributes);\n      yield sharedSeq.load(services);\n      return sharedSeq;\n    })();\n  }\n  create(document, id) {\n    const sharedString = new SharedNumberSequence(document, id, this.attributes);\n    sharedString.initializeLocal();\n    return sharedString;\n  }\n}\nSharedNumberSequenceFactory.Type = \"https://graph.microsoft.com/types/mergeTree/number-sequence\";\nSharedNumberSequenceFactory.Attributes = {\n  type: SharedNumberSequenceFactory.Type,\n  snapshotFormatVersion: \"0.1\",\n  packageVersion: pkgVersion\n};\n//# sourceMappingURL=sequenceFactory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}