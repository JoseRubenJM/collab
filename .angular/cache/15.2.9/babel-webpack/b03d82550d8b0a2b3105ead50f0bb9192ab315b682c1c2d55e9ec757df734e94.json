{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getTinyliciousContainer } from \"@fluidframework/get-tinylicious-container\";\nimport { getDefaultObjectFromContainer } from \"@fluidframework/aqueduct\";\nimport * as i0 from \"@angular/core\";\nexport let FluidLoaderService = /*#__PURE__*/(() => {\n  class FluidLoaderService {\n    constructor() {\n      this.createNew = false;\n      if (window.location.hash.length === 0) {\n        this.createNew = true;\n        window.location.hash = Date.now().toString();\n      }\n      this.documentId = window.location.hash.substring(1);\n    }\n    loadDataObject(factory) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // The getTinyliciousContainer helper function facilitates loading our container code into a Container and\n        // connecting to a locally-running test service called Tinylicious.  This will look different when moving to a\n        // production service, but ultimately we'll still be getting a reference to a Container object.  \n        // The helper function takes the ID of the document we're creating or loading, the container code to load into it, and a\n        // flag to specify whether we're creating a new document or loading an existing one.\n        const container = yield getTinyliciousContainer(this.documentId, factory, this.createNew);\n        // Get the Default Object from the Container\n        return yield getDefaultObjectFromContainer(container);\n      });\n    }\n  }\n  FluidLoaderService.ɵfac = function FluidLoaderService_Factory(t) {\n    return new (t || FluidLoaderService)();\n  };\n  FluidLoaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FluidLoaderService,\n    factory: FluidLoaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return FluidLoaderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}