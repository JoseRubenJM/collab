{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Helper function that clones the GC data.\n * @param gcData - The GC data to clone.\n * @returns a clone of the given GC data.\n */\nexport function cloneGCData(gcData) {\n  const clonedGCNodes = {};\n  for (const [id, outboundRoutes] of Object.entries(gcData.gcNodes)) {\n    clonedGCNodes[id] = Array.from(outboundRoutes);\n  }\n  return {\n    gcNodes: clonedGCNodes\n  };\n}\nexport class GCDataBuilder {\n  constructor() {\n    this.gcNodes = {};\n  }\n  addNode(id, outboundRoutes) {\n    this.gcNodes[id] = outboundRoutes;\n  }\n  /**\n   * Adds the given GC nodes. It does the following:\n   * - Normalizes the ids of the given nodes.\n   * - Prefixes the given `prefixId` to the given nodes' ids.\n   * - Adds the outbound routes of the nodes against the normalized and prefixed id.\n   */\n  prefixAndAddNodes(prefixId, gcNodes) {\n    for (const [id, outboundRoutes] of Object.entries(gcNodes)) {\n      let normalizedId = id;\n      // Remove any starting slashes from the id.\n      while (normalizedId.startsWith(\"/\")) {\n        normalizedId = normalizedId.substr(1);\n      }\n      // Prefix the given id to the normalized id.\n      normalizedId = `/${prefixId}/${normalizedId}`;\n      // Remove any trailing slashes from the normalized id.\n      while (normalizedId.endsWith(\"/\")) {\n        normalizedId = normalizedId.substr(0, normalizedId.length - 1);\n      }\n      // Add the outbound routes against the normalized and prefixed id.\n      this.gcNodes[normalizedId] = outboundRoutes;\n    }\n  }\n  /**\n   * Adds the given outbound route to the outbound routes of all GC nodes.\n   */\n  addRouteToAllNodes(outboundRoute) {\n    for (const outboundRoutes of Object.values(this.gcNodes)) {\n      outboundRoutes.push(outboundRoute);\n    }\n  }\n  getGCData() {\n    return {\n      gcNodes: this.gcNodes\n    };\n  }\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}