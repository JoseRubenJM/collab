{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { FileMode, TreeEntry } from \"@fluidframework/protocol-definitions\";\nimport { unreachableCase } from \"@fluidframework/common-utils\";\n/**\n * Take a summary object and returns its git mode.\n *\n * @param value - summary object\n * @returns the git mode of summary object\n */\nexport function getGitMode(value) {\n  const type = value.type === 3 /* Handle */ ? value.handleType : value.type;\n  switch (type) {\n    case 2 /* Blob */:\n    case 4 /* Attachment */:\n      return FileMode.File;\n    case 1 /* Tree */:\n      return FileMode.Directory;\n    default:\n      unreachableCase(type, `Unknown type: ${type}`);\n  }\n}\n/**\n * Take a summary object and returns its type.\n *\n * @param value - summary object\n * @returns the type of summary object\n */\nexport function getGitType(value) {\n  const type = value.type === 3 /* Handle */ ? value.handleType : value.type;\n  switch (type) {\n    case 2 /* Blob */:\n    case 4 /* Attachment */:\n      return \"blob\";\n    case 1 /* Tree */:\n      return \"tree\";\n    default:\n      unreachableCase(type, `Unknown type: ${type}`);\n  }\n}\n/**\n * Build a tree hierarchy base on a flat tree\n *\n * @param flatTree - a flat tree\n * @param blobsShaToPathCache - Map with blobs sha as keys and values as path of the blob.\n * @returns the hierarchical tree\n */\nexport function buildHierarchy(flatTree, blobsShaToPathCache = new Map()) {\n  const lookup = {};\n  const root = {\n    id: flatTree.sha,\n    blobs: {},\n    commits: {},\n    trees: {}\n  };\n  lookup[\"\"] = root;\n  for (const entry of flatTree.tree) {\n    const lastIndex = entry.path.lastIndexOf(\"/\");\n    const entryPathDir = entry.path.slice(0, Math.max(0, lastIndex));\n    const entryPathBase = entry.path.slice(lastIndex + 1);\n    // The flat output is breadth-first so we can assume we see tree nodes prior to their contents\n    const node = lookup[entryPathDir];\n    // Add in either the blob or tree\n    if (entry.type === \"tree\") {\n      const newTree = {\n        id: entry.sha,\n        blobs: {},\n        commits: {},\n        trees: {}\n      };\n      node.trees[decodeURIComponent(entryPathBase)] = newTree;\n      lookup[entry.path] = newTree;\n    } else if (entry.type === \"blob\") {\n      node.blobs[decodeURIComponent(entryPathBase)] = entry.sha;\n      blobsShaToPathCache.set(entry.sha, `/${entry.path}`);\n    } else if (entry.type === \"commit\") {\n      node.commits[decodeURIComponent(entryPathBase)] = entry.sha;\n    }\n  }\n  return root;\n}\n/**\n * Basic implementation of a blob ITreeEntry\n */\nexport class BlobTreeEntry {\n  /**\n   * Creates a blob ITreeEntry\n   * @param path - path of entry\n   * @param contents - blob contents\n   * @param encoding - encoding of contents; defaults to utf-8\n   */\n  constructor(path, contents, encoding = \"utf-8\") {\n    this.path = path;\n    this.mode = FileMode.File;\n    this.type = TreeEntry.Blob;\n    this.value = {\n      contents,\n      encoding\n    };\n  }\n}\n/**\n * Basic implementation of a commit ITreeEntry\n */\nexport class CommitTreeEntry {\n  /**\n   * Creates a commit ITreeEntry\n   * @param path - path of entry\n   * @param value - commit value\n   */\n  constructor(path, value) {\n    this.path = path;\n    this.value = value;\n    this.mode = FileMode.Commit;\n    this.type = TreeEntry.Commit;\n  }\n}\n/**\n * Basic implementation of a tree ITreeEntry\n */\nexport class TreeTreeEntry {\n  /**\n   * Creates a tree ITreeEntry\n   * @param path - path of entry\n   * @param value - subtree\n   */\n  constructor(path, value) {\n    this.path = path;\n    this.value = value;\n    this.mode = FileMode.Directory;\n    this.type = TreeEntry.Tree;\n  }\n}\n/**\n * Basic implementation of an attachment ITreeEntry\n */\nexport class AttachmentTreeEntry {\n  /**\n   * Creates an attachment ITreeEntry\n   * @param path - path of entry\n   * @param id - id of external blob attachment\n   */\n  constructor(path, id) {\n    this.path = path;\n    this.id = id;\n    this.mode = FileMode.File;\n    this.type = TreeEntry.Attachment;\n    this.value = {\n      id\n    };\n  }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function addBlobToTree(tree, blobName, content) {\n  tree.entries.push({\n    mode: FileMode.File,\n    path: blobName,\n    type: TreeEntry.Blob,\n    value: {\n      contents: JSON.stringify(content),\n      encoding: \"utf-8\"\n    }\n  });\n}\n//# sourceMappingURL=blobs.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}