{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nexport class RateLimiter {\n  constructor(maxRequests) {\n    this.maxRequests = maxRequests;\n    this.tasks = [];\n    // Run when one of the tasks finished running.\n    // Release next task if we have one, or allow more tasks to run in future.\n    this.release = () => {\n      const task = this.tasks.shift();\n      if (task !== undefined) {\n        return task();\n      }\n      this.maxRequests++;\n    };\n    assert(maxRequests > 0, 0x0ae /* \"Tried to create rate limiter with 0 max requests!\" */);\n  }\n\n  get waitQueueLength() {\n    return this.tasks.length;\n  }\n  acquire() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.maxRequests > 0) {\n        _this.maxRequests--;\n        return;\n      }\n      return new Promise(resolve => {\n        _this.tasks.push(resolve);\n      });\n    })();\n  }\n  schedule(work) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.acquire();\n      return work().finally(_this2.release);\n    })();\n  }\n}\n//# sourceMappingURL=rateLimiter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}