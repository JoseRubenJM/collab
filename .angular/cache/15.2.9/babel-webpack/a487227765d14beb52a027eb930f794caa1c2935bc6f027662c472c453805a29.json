{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { NetworkErrorBasic, GenericNetworkError, createGenericNetworkError } from \"@fluidframework/driver-utils\";\nimport { TelemetryNullLogger } from \"@fluidframework/common-utils\";\nexport var R11sErrorType = /*#__PURE__*/(() => {\n  (function (R11sErrorType) {\n    R11sErrorType[\"authorizationError\"] = \"authorizationError\";\n    R11sErrorType[\"fileNotFoundOrAccessDeniedError\"] = \"fileNotFoundOrAccessDeniedError\";\n  })(R11sErrorType || (R11sErrorType = {}));\n  return R11sErrorType;\n})();\nfunction createNetworkError(errorMessage, canRetry, statusCode, retryAfterSeconds) {\n  switch (statusCode) {\n    case 401:\n    case 403:\n      return new NetworkErrorBasic(errorMessage, R11sErrorType.authorizationError, canRetry, statusCode);\n      break;\n    case 404:\n      return new NetworkErrorBasic(errorMessage, R11sErrorType.fileNotFoundOrAccessDeniedError, canRetry, statusCode);\n      break;\n    case 500:\n      return new GenericNetworkError(errorMessage, canRetry, statusCode);\n      break;\n    default:\n      return createGenericNetworkError(errorMessage, canRetry, retryAfterSeconds, statusCode);\n  }\n}\n/**\n * Returns specific network error based on error object.\n */\nconst errorObjectFromSocketError = (socketError, canRetry) => {\n  return createNetworkError(socketError.message, canRetry, socketError.code, socketError.retryAfter);\n};\n/**\n * Wrapper over the shared one for driver specific translation.\n */\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n  static create(tenantId, id, token, io, client, url) {\n    return _asyncToGenerator(function* () {\n      try {\n        const connection = yield DocumentDeltaConnection.create(tenantId, id, token, io, client, url, new TelemetryNullLogger());\n        return connection;\n      } catch (errorObject) {\n        // Test if it's a NetworkError. Note that there might be no SocketError on it in case we hit\n        // nonrecoverable socket.io protocol errors! So we test canRetry property first - if it false,\n        // that means protocol is broken and reconnecting will not help.\n        // TODO: Add more cases as we feel appropriate.\n        if (errorObject !== null && typeof errorObject === \"object\" && errorObject.canRetry) {\n          const socketError = errorObject.socketError;\n          if (typeof socketError === \"object\" && socketError !== null) {\n            throw errorObjectFromSocketError(socketError, true);\n          }\n        }\n        throw errorObject;\n      }\n    })();\n  }\n}\n//# sourceMappingURL=documentDeltaConnection.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}