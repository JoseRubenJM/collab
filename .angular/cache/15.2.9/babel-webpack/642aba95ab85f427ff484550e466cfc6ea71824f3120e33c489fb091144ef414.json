{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { parse } from \"url\";\nimport { ensureFluidResolvedUrl } from \"./fluidResolvedUrl\";\nexport class MultiDocumentServiceFactory {\n  constructor(documentServiceFactories) {\n    this.protocolName = \"none:\";\n    this.protocolToDocumentFactoryMap = new Map();\n    documentServiceFactories.forEach(factory => {\n      this.protocolToDocumentFactoryMap.set(factory.protocolName, factory);\n    });\n  }\n  static create(documentServiceFactory) {\n    if (Array.isArray(documentServiceFactory)) {\n      const factories = [];\n      documentServiceFactory.forEach(factory => {\n        const maybeMulti = factory;\n        if (maybeMulti.protocolToDocumentFactoryMap !== undefined) {\n          factories.push(...maybeMulti.protocolToDocumentFactoryMap.values());\n        } else {\n          factories.push(factory);\n        }\n      });\n      if (factories.length === 1) {\n        return factories[0];\n      }\n      return new MultiDocumentServiceFactory(factories);\n    }\n    return documentServiceFactory;\n  }\n  createDocumentService(resolvedUrl, logger, clientIsSummarizer) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      ensureFluidResolvedUrl(resolvedUrl);\n      const urlObj = parse(resolvedUrl.url);\n      if (urlObj.protocol === undefined || urlObj.protocol === null) {\n        throw new Error(\"No protocol provided\");\n      }\n      const factory = _this.protocolToDocumentFactoryMap.get(urlObj.protocol);\n      if (factory === undefined) {\n        throw new Error(\"Unknown Fluid protocol\");\n      }\n      return factory.createDocumentService(resolvedUrl, logger, clientIsSummarizer);\n    })();\n  }\n  createContainer(createNewSummary, createNewResolvedUrl, logger, clientIsSummarizer) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      ensureFluidResolvedUrl(createNewResolvedUrl);\n      const urlObj = parse(createNewResolvedUrl.url);\n      if (urlObj.protocol === undefined || urlObj.protocol === null) {\n        throw new Error(\"No protocol provided\");\n      }\n      const factory = _this2.protocolToDocumentFactoryMap.get(urlObj.protocol);\n      if (factory === undefined) {\n        throw new Error(\"Unknown Fluid protocol\");\n      }\n      return factory.createContainer(createNewSummary, createNewResolvedUrl, logger, clientIsSummarizer);\n    })();\n  }\n}\n//# sourceMappingURL=multiDocumentServiceFactory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}