{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DriverHeader } from \"@fluidframework/driver-definitions\";\n/**\n * Implementation of {@link @fluidframework/driver-definitions#IUrlResolver} to resolve documents stored using the\n * Azure Fluid Relay based off of the orderer and storage URLs provide.\n *\n * @remarks The token provider here can be an `InsecureTokenProvider` for basic scenarios or more robust, secure\n * providers that fulfill the {@link @fluidframework/routerlicious-driver#ITokenProvider} interface.\n */\nexport class AzureUrlResolver {\n  constructor() {}\n  resolve(request) {\n    return _asyncToGenerator(function* () {\n      const {\n        ordererUrl,\n        storageUrl,\n        tenantId,\n        containerId\n      } = decodeAzureUrl(request.url);\n      // determine whether the request is for creating of a new container.\n      // such request has the `createNew` header set to true and doesn't have a container ID.\n      if (request.headers && request.headers[DriverHeader.createNew] === true) {\n        return {\n          endpoints: {\n            deltaStorageUrl: `${ordererUrl}/deltas/${tenantId}/new`,\n            ordererUrl,\n            storageUrl: `${storageUrl}/repos/${tenantId}`\n          },\n          // id is a mandatory attribute, but it's ignored by the driver for new container requests.\n          id: \"\",\n          // tokens attribute is redundant as all tokens are generated via ITokenProvider\n          tokens: {},\n          type: \"fluid\",\n          url: `${ordererUrl}/${tenantId}/new`\n        };\n      }\n      if (containerId === undefined) {\n        throw new Error(\"Azure URL did not contain containerId\");\n      }\n      const documentUrl = `${ordererUrl}/${tenantId}/${containerId}`;\n      return {\n        endpoints: {\n          deltaStorageUrl: `${ordererUrl}/deltas/${tenantId}/${containerId}`,\n          ordererUrl,\n          storageUrl: `${storageUrl}/repos/${tenantId}`\n        },\n        id: containerId,\n        tokens: {},\n        type: \"fluid\",\n        url: documentUrl\n      };\n    })();\n  }\n  getAbsoluteUrl(resolvedUrl, relativeUrl) {\n    return _asyncToGenerator(function* () {\n      if (resolvedUrl.type !== \"fluid\") {\n        throw new Error(\"Invalid Resolved Url\");\n      }\n      return `${resolvedUrl.url}/${relativeUrl}`;\n    })();\n  }\n}\nfunction decodeAzureUrl(urlString) {\n  const url = new URL(urlString);\n  const ordererUrl = url.origin;\n  const searchParams = url.searchParams;\n  const storageUrl = searchParams.get(\"storage\");\n  if (storageUrl === null) {\n    throw new Error(\"Azure URL did not contain a storage URL\");\n  }\n  const tenantId = searchParams.get(\"tenantId\");\n  if (tenantId === null) {\n    throw new Error(\"Azure URL did not contain a tenant ID\");\n  }\n  const storageUrlDecoded = decodeURIComponent(storageUrl);\n  const tenantIdDecoded = decodeURIComponent(tenantId);\n  const containerId = searchParams.get(\"containerId\");\n  const containerIdDecoded = containerId !== null ? decodeURIComponent(containerId) : undefined;\n  return {\n    ordererUrl,\n    storageUrl: storageUrlDecoded,\n    tenantId: tenantIdDecoded,\n    containerId: containerIdDecoded\n  };\n}\nexport const createAzureCreateNewRequest = (endpointUrl, tenantId) => {\n  const url = new URL(endpointUrl);\n  url.searchParams.append(\"storage\", encodeURIComponent(endpointUrl));\n  url.searchParams.append(\"tenantId\", encodeURIComponent(tenantId));\n  return {\n    url: url.href,\n    headers: {\n      [DriverHeader.createNew]: true\n    }\n  };\n};\n//# sourceMappingURL=AzureUrlResolver.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}