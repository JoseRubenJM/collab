{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { fromUtf8ToBase64 } from \"@fluidframework/common-utils\";\nimport * as uuid from \"uuid\";\nimport { RestWrapper } from \"./restWrapper\";\nfunction endsWith(value, endings) {\n  for (const ending of endings) {\n    if (value.endsWith(ending)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Implementation of the IHistorian interface that calls out to a REST interface\n */\nexport class Historian {\n  constructor(endpoint, historianApi, disableCache, credentials, getCorrelationId) {\n    this.endpoint = endpoint;\n    this.historianApi = historianApi;\n    this.disableCache = disableCache;\n    const queryString = {};\n    let cacheBust = false;\n    if (this.disableCache && this.historianApi) {\n      queryString.disableCache = this.disableCache;\n    } else if (this.disableCache) {\n      cacheBust = true;\n    }\n    if (credentials) {\n      queryString.token = fromUtf8ToBase64(`${credentials.user}`);\n    }\n    const headers = credentials ? {\n      Authorization: `Basic ${fromUtf8ToBase64(`${credentials.user}:${credentials.password}`)}`\n    } : {};\n    if (getCorrelationId) {\n      headers[\"x-correlation-id\"] = getCorrelationId() || uuid.v4();\n    }\n    this.restWrapper = new RestWrapper(endpoint, headers, queryString, cacheBust);\n  }\n  /* eslint-disable @typescript-eslint/promise-function-async */\n  getHeader(sha) {\n    if (this.historianApi) {\n      return this.restWrapper.get(`/headers/${encodeURIComponent(sha)}`);\n    } else {\n      return this.getHeaderDirect(sha);\n    }\n  }\n  getFullTree(sha) {\n    return this.restWrapper.get(`/tree/${encodeURIComponent(sha)}`);\n  }\n  getBlob(sha) {\n    return this.restWrapper.get(`/git/blobs/${encodeURIComponent(sha)}`);\n  }\n  createBlob(blob) {\n    return this.restWrapper.post(`/git/blobs`, blob);\n  }\n  getContent(path, ref) {\n    return this.restWrapper.get(`/contents/${path}`, {\n      ref\n    });\n  }\n  getCommits(sha, count) {\n    return this.restWrapper.get(`/commits`, {\n      count,\n      sha\n    }).catch(error => error === 400 || error === 404 ? [] : Promise.reject(error));\n  }\n  getCommit(sha) {\n    return this.restWrapper.get(`/git/commits/${encodeURIComponent(sha)}`);\n  }\n  createCommit(commit) {\n    return this.restWrapper.post(`/git/commits`, commit);\n  }\n  getRefs() {\n    return this.restWrapper.get(`/git/refs`);\n  }\n  getRef(ref) {\n    return this.restWrapper.get(`/git/refs/${ref}`);\n  }\n  createRef(params) {\n    return this.restWrapper.post(`/git/refs`, params);\n  }\n  updateRef(ref, params) {\n    return this.restWrapper.patch(`/git/refs/${ref}`, params);\n  }\n  /* eslint-enable @typescript-eslint/promise-function-async */\n  deleteRef(ref) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.restWrapper.delete(`/git/refs/${ref}`);\n    })();\n  }\n  /* eslint-disable @typescript-eslint/promise-function-async */\n  createTag(tag) {\n    return this.restWrapper.post(`/git/tags`, tag);\n  }\n  getTag(tag) {\n    return this.restWrapper.get(`/git/tags/${tag}`);\n  }\n  createTree(tree) {\n    return this.restWrapper.post(`/git/trees`, tree);\n  }\n  getTree(sha, recursive) {\n    return this.restWrapper.get(`/git/trees/${encodeURIComponent(sha)}`, {\n      recursive: recursive ? 1 : 0\n    });\n  }\n  /* eslint-enable @typescript-eslint/promise-function-async */\n  getHeaderDirect(sha) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const tree = yield _this2.getTree(sha, true);\n      const includeBlobs = [\".attributes\", \".blobs\", \".messages\", \"header\"];\n      const blobsP = [];\n      for (const entry of tree.tree) {\n        if (entry.type === \"blob\" && endsWith(entry.path, includeBlobs)) {\n          const blobP = _this2.getBlob(entry.sha);\n          blobsP.push(blobP);\n        }\n      }\n      const blobs = yield Promise.all(blobsP);\n      return {\n        blobs,\n        tree\n      };\n    })();\n  }\n}\n//# sourceMappingURL=historian.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}