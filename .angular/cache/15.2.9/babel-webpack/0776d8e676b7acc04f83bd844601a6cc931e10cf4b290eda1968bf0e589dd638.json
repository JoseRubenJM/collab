{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport assert from \"assert\";\nimport { GitManager, Historian } from \"@fluidframework/server-services-client\";\nimport io from \"socket.io-client\";\nimport { DeltaStorageService, DocumentDeltaStorageService } from \"./deltaStorageService\";\nimport { DocumentStorageService } from \"./documentStorageService\";\nimport { R11sDocumentDeltaConnection } from \"./documentDeltaConnection\";\nimport { NullBlobStorageService } from \"./nullBlobStorageService\";\n/**\n * The DocumentService manages the Socket.IO connection and manages routing requests to connected\n * clients\n */\nexport class DocumentService {\n  constructor(resolvedUrl, ordererUrl, deltaStorageUrl, gitUrl, errorTracking, disableCache, historianApi, directCredentials, gitCache, tokenProvider, tenantId, documentId) {\n    this.resolvedUrl = resolvedUrl;\n    this.ordererUrl = ordererUrl;\n    this.deltaStorageUrl = deltaStorageUrl;\n    this.gitUrl = gitUrl;\n    this.errorTracking = errorTracking;\n    this.disableCache = disableCache;\n    this.historianApi = historianApi;\n    this.directCredentials = directCredentials;\n    this.gitCache = gitCache;\n    this.tokenProvider = tokenProvider;\n    this.tenantId = tenantId;\n    this.documentId = documentId;\n  }\n  /**\n   * Connects to a storage endpoint for snapshot service.\n   *\n   * @returns returns the document storage service for routerlicious driver.\n   */\n  connectToStorage() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.gitUrl === undefined) {\n        return new NullBlobStorageService();\n      }\n      const storageToken = yield _this.tokenProvider.fetchStorageToken(_this.tenantId, _this.documentId);\n      // Craft credentials - either use the direct credentials (i.e. a GitHub user + PAT) - or make use of our\n      // tenant token\n      let credentials;\n      if (_this.directCredentials) {\n        credentials = _this.directCredentials;\n      } else {\n        credentials = {\n          password: storageToken.jwt,\n          user: _this.tenantId\n        };\n      }\n      const historian = new Historian(_this.gitUrl, _this.historianApi, _this.disableCache, credentials);\n      const gitManager = new GitManager(historian);\n      // Insert cached seed data\n      if (_this.gitCache !== undefined) {\n        for (const ref of Object.keys(_this.gitCache.refs)) {\n          gitManager.addRef(ref, _this.gitCache.refs[ref]);\n        }\n        for (const commit of _this.gitCache.commits) {\n          gitManager.addCommit(commit);\n        }\n        for (const tree of _this.gitCache.trees) {\n          gitManager.addTree(tree);\n        }\n        for (const blob of _this.gitCache.blobs) {\n          gitManager.addBlob(blob);\n        }\n      }\n      _this.documentStorageService = new DocumentStorageService(_this.documentId, gitManager);\n      return _this.documentStorageService;\n    })();\n  }\n  /**\n   * Connects to a delta storage endpoint for getting ops between a range.\n   *\n   * @returns returns the document delta storage service for routerlicious driver.\n   */\n  connectToDeltaStorage() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      assert(_this2.documentStorageService, \"Storage service not initialized\");\n      const deltaStorage = new DeltaStorageService(_this2.deltaStorageUrl, _this2.tokenProvider);\n      return new DocumentDeltaStorageService(_this2.tenantId, _this2.documentId, deltaStorage, _this2.documentStorageService);\n    })();\n  }\n  /**\n   * Connects to a delta stream endpoint for emitting ops.\n   *\n   * @returns returns the document delta stream service for routerlicious driver.\n   */\n  connectToDeltaStream(client) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const ordererToken = yield _this3.tokenProvider.fetchOrdererToken(_this3.tenantId, _this3.documentId);\n      return R11sDocumentDeltaConnection.create(_this3.tenantId, _this3.documentId, ordererToken.jwt, io, client, _this3.ordererUrl);\n    })();\n  }\n  getErrorTrackingService() {\n    return this.errorTracking;\n  }\n}\n//# sourceMappingURL=documentService.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}