{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { Loader } from \"@fluidframework/container-loader\";\nexport function getContainer(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _getContainer.apply(this, arguments);\n}\n//# sourceMappingURL=getContainer.js.map\nfunction _getContainer() {\n  _getContainer = _asyncToGenerator(function* (documentId, createNew, request, urlResolver, documentServiceFactory, containerRuntimeFactory) {\n    const module = {\n      fluidExport: containerRuntimeFactory\n    };\n    const codeLoader = {\n      load: function () {\n        var _ref = _asyncToGenerator(function* () {\n          return module;\n        });\n        return function load() {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    };\n    const loader = new Loader({\n      urlResolver,\n      documentServiceFactory,\n      codeLoader\n    });\n    let container;\n    if (createNew) {\n      // We're not actually using the code proposal (our code loader always loads the same module regardless of the\n      // proposal), but the Container will only give us a NullRuntime if there's no proposal.  So we'll use a fake\n      // proposal.\n      container = yield loader.createDetachedContainer({\n        package: \"no-dynamic-package\",\n        config: {}\n      });\n      yield container.attach({\n        url: documentId\n      });\n    } else {\n      // Request must be appropriate and parseable by resolver.\n      container = yield loader.resolve(request);\n      // If we didn't create the container properly, then it won't function correctly.  So we'll throw if we got a\n      // new container here, where we expect this to be loading an existing container.\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      if (!container.existing) {\n        throw new Error(\"Attempted to load a non-existing container\");\n      }\n    }\n    return container;\n  });\n  return _getContainer.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}