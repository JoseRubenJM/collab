{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { KJUR as jsrsasign } from \"jsrsasign\";\nimport jwtDecode from \"jwt-decode\";\nimport { v4 as uuid } from \"uuid\";\n/**\n * Validates a JWT token to authorize routerlicious and returns decoded claims.\n * An undefined return value indicates invalid claims.\n */\nexport function validateTokenClaims(token, documentId, tenantId, maxTokenLifetimeSec, isTokenExpiryEnabled) {\n  const claims = jwtDecode(token);\n  if (!claims || claims.documentId !== documentId || claims.tenantId !== tenantId) {\n    return undefined;\n  }\n  if (claims.scopes === undefined || claims.scopes.length === 0) {\n    return undefined;\n  }\n  if (isTokenExpiryEnabled && claims.exp && claims.iat) {\n    const now = Math.round(new Date().getTime() / 1000);\n    if (now >= claims.exp || claims.exp - claims.iat > maxTokenLifetimeSec) {\n      return undefined;\n    }\n  }\n  return claims;\n}\n/**\n * Generates a JWT token to authorize routerlicious. This function uses a browser friendly auth library (jsrsasign)\n * and should only be used in client context.\n */\n// TODO: We should use this library in all client code rather than using jsrsasign directly.\nexport function generateToken(tenantId, documentId, key, scopes, user, lifetime = 60 * 60, ver = \"1.0\") {\n  // eslint-disable-next-line no-param-reassign\n  user = user ? user : generateUser();\n  if (user.id === \"\" || user.id === undefined) {\n    // eslint-disable-next-line no-param-reassign\n    user = generateUser();\n  }\n  // Current time in seconds\n  const now = Math.round(new Date().getTime() / 1000);\n  const claims = {\n    documentId,\n    scopes,\n    tenantId,\n    user,\n    iat: now,\n    exp: now + lifetime,\n    ver\n  };\n  const utf8Key = {\n    utf8: key\n  };\n  // eslint-disable-next-line no-null/no-null\n  return jsrsasign.jws.JWS.sign(null, JSON.stringify({\n    alg: \"HS256\",\n    typ: \"JWT\"\n  }), claims, utf8Key);\n}\nexport function generateUser() {\n  const randomUser = {\n    id: uuid(),\n    name: uuid()\n  };\n  return randomUser;\n}\n//# sourceMappingURL=auth.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}