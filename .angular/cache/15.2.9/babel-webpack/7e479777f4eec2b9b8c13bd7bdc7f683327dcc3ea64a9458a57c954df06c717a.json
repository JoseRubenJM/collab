{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { MessageType } from \"@fluidframework/protocol-definitions\";\nimport { Quorum } from \"./quorum\";\nexport function isSystemMessage(message) {\n  switch (message.type) {\n    case MessageType.ClientJoin:\n    case MessageType.ClientLeave:\n    case MessageType.Propose:\n    case MessageType.Reject:\n    case MessageType.NoOp:\n    case MessageType.NoClient:\n    case MessageType.Summarize:\n    case MessageType.SummaryAck:\n    case MessageType.SummaryNack:\n      return true;\n    default:\n      return false;\n  }\n}\n/**\n * Handles protocol specific ops.\n */\nexport class ProtocolOpHandler {\n  constructor(minimumSequenceNumber, sequenceNumber, term, members, proposals, values, sendProposal, sendReject) {\n    this.minimumSequenceNumber = minimumSequenceNumber;\n    this.sequenceNumber = sequenceNumber;\n    this.term = term !== null && term !== void 0 ? term : 1;\n    this.quorum = new Quorum(minimumSequenceNumber, members, proposals, values, sendProposal, sendReject);\n  }\n  close() {\n    this.quorum.close();\n  }\n  processMessage(message, local) {\n    let immediateNoOp = false;\n    switch (message.type) {\n      case MessageType.ClientJoin:\n        const systemJoinMessage = message;\n        const join = JSON.parse(systemJoinMessage.data);\n        const member = {\n          client: join.detail,\n          sequenceNumber: systemJoinMessage.sequenceNumber\n        };\n        this.quorum.addMember(join.clientId, member);\n        break;\n      case MessageType.ClientLeave:\n        const systemLeaveMessage = message;\n        const clientId = JSON.parse(systemLeaveMessage.data);\n        this.quorum.removeMember(clientId);\n        break;\n      case MessageType.Propose:\n        const proposal = message.contents;\n        this.quorum.addProposal(proposal.key, proposal.value, message.sequenceNumber, local, message.clientSequenceNumber);\n        // On a quorum proposal, immediately send a response to expedite the approval.\n        immediateNoOp = true;\n        break;\n      case MessageType.Reject:\n        const sequenceNumber = message.contents;\n        this.quorum.rejectProposal(message.clientId, sequenceNumber);\n        break;\n      default:\n    }\n    // Update tracked sequence numbers\n    this.minimumSequenceNumber = message.minimumSequenceNumber;\n    this.sequenceNumber = message.sequenceNumber;\n    // Notify the quorum of the MSN from the message. We rely on it to handle duplicate values but may\n    // want to move that logic to this class.\n    immediateNoOp = this.quorum.updateMinimumSequenceNumber(message) || immediateNoOp;\n    return {\n      immediateNoOp\n    };\n  }\n  getProtocolState() {\n    const quorumSnapshot = this.quorum.snapshot();\n    return {\n      members: quorumSnapshot.members,\n      minimumSequenceNumber: this.minimumSequenceNumber,\n      proposals: quorumSnapshot.proposals,\n      sequenceNumber: this.sequenceNumber,\n      values: quorumSnapshot.values\n    };\n  }\n}\n//# sourceMappingURL=protocol.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}