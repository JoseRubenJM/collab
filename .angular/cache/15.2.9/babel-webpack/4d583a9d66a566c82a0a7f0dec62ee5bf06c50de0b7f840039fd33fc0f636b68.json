{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nconst isRobot = client => {\n  var _a, _b, _c, _d;\n  return !(_d = (_c = (_b = (_a = client.client) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.capabilities) === null || _c === void 0 ? void 0 : _c.interactive, _d !== null && _d !== void 0 ? _d : true);\n};\n/**\n * For a given list of connected clients and tasks to run, this function calculates need for local & remote help.\n * Right now only one client (aka leader) is allowed to run tasks and ask for local and remote.\n * To become completely distributed, each client should take into account other client permissions\n * and calculate help list. Then each client will pick up work independently and only leader will\n * ask for help.\n * TODO: Make this run on all clients once services are hardened better.\n * @param runnerClientId - Client making this call.\n * @param clients - List of all clients currently in the system.\n * @param tasks - Tasks to be performed.\n */\nexport function analyzeTasks(runnerClientId, clients, tasks) {\n  const robotClients = [...clients].filter(client => isRobot(client[1]));\n  const handledTasks = robotClients.map(robot => robot[1].client.details.type);\n  const unhandledTasks = tasks.filter(task => !handledTasks.includes(task));\n  if (unhandledTasks.length > 0) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const runnerClient = clients.get(runnerClientId);\n    assert(!!runnerClient); // assume runnerClientId must be in the clients list.\n    const permission = runnerClient.client && runnerClient.client.permission ? runnerClient.client.permission : [];\n    const allowedTasks = unhandledTasks.filter(task => permission && permission.includes(task));\n    const robotNeeded = unhandledTasks.filter(task => permission && !permission.includes(task));\n    return {\n      browser: allowedTasks,\n      robot: robotNeeded\n    };\n  }\n}\n//# sourceMappingURL=taskAnalyzer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}