{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nimport { DataProcessingError } from \"@fluidframework/container-utils\";\nexport class ChannelDeltaConnection {\n  constructor(objectId, _connected, submit, dirty, addedGCOutboundReference) {\n    this.objectId = objectId;\n    this._connected = _connected;\n    this.submit = submit;\n    this.dirty = dirty;\n    this.addedGCOutboundReference = addedGCOutboundReference;\n  }\n  get handler() {\n    assert(!!this._handler, 0x177 /* \"Missing delta handler\" */);\n    return this._handler;\n  }\n  get connected() {\n    return this._connected;\n  }\n  attach(handler) {\n    assert(this._handler === undefined, 0x178 /* \"Missing delta handler on attach\" */);\n    this._handler = handler;\n  }\n  setConnectionState(connected) {\n    this._connected = connected;\n    this.handler.setConnectionState(connected);\n  }\n  process(message, local, localOpMetadata) {\n    try {\n      // catches as data processing error whether or not they come from async pending queues\n      this.handler.process(message, local, localOpMetadata);\n    } catch (error) {\n      throw DataProcessingError.wrapIfUnrecognized(error, \"channelDeltaConnectionFailedToProcessMessage\", message);\n    }\n  }\n  reSubmit(content, localOpMetadata) {\n    this.handler.reSubmit(content, localOpMetadata);\n  }\n  rollback(content, localOpMetadata) {\n    if (this.handler.rollback === undefined) {\n      throw new Error(\"Handler doesn't support rollback\");\n    }\n    this.handler.rollback(content, localOpMetadata);\n  }\n  applyStashedOp(message) {\n    return this.handler.applyStashedOp(message);\n  }\n}\n//# sourceMappingURL=channelDeltaConnection.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}