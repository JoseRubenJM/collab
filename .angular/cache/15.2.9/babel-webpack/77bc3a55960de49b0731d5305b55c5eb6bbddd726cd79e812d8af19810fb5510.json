{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { assert } from \"@fluidframework/common-utils\";\nexport function requestFluidObject(_x, _x2) {\n  return _requestFluidObject.apply(this, arguments);\n}\nfunction _requestFluidObject() {\n  _requestFluidObject = _asyncToGenerator(function* (router, url) {\n    const request = typeof url === \"string\" ? {\n      url\n    } : url;\n    const response = yield router.request(request);\n    if (response.status !== 200 || response.mimeType !== \"fluid/object\") {\n      return Promise.reject(new Error(\"Not found\"));\n    }\n    assert(response.value);\n    return response.value;\n  });\n  return _requestFluidObject.apply(this, arguments);\n}\nexport function createDataStoreFactory(type, factory) {\n  return {\n    type,\n    get IFluidDataStoreFactory() {\n      return this;\n    },\n    get IFluidDataStoreRegistry() {\n      return this;\n    },\n    instantiateDataStore: function () {\n      var _ref = _asyncToGenerator(function* (context) {\n        return (yield factory).instantiateDataStore(context);\n      });\n      return function instantiateDataStore(_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    get: function () {\n      var _ref2 = _asyncToGenerator(function* (name) {\n        var _a;\n        return (_a = (yield factory).IFluidDataStoreRegistry) === null || _a === void 0 ? void 0 : _a.get(name);\n      });\n      return function get(_x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  };\n}\n//# sourceMappingURL=dataStoreHelpers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}