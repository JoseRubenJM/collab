{"ast":null,"code":"/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Creates the op for annotating the markers with the provided properties\n * @param marker - The marker to annotate\n * @param props - The properties to annotate the marker with\n * @param combiningOp - Optional. Specifies how to combine values for the property, such as \"incr\" for increment.\n * @returns The annotate op\n */\nexport function createAnnotateMarkerOp(marker, props, combiningOp) {\n  const id = marker.getId();\n  if (!id) {\n    return undefined;\n  }\n  return {\n    combiningOp,\n    props,\n    relativePos1: {\n      id,\n      before: true\n    },\n    relativePos2: {\n      id\n    },\n    type: 2 /* ANNOTATE */\n  };\n}\n/**\n * Creates the op for annotating the range with the provided properties\n * @param start - The inclusive start postition of the range to annotate\n * @param end - The exclusive end position of the range to annotate\n * @param props - The properties to annotate the range with\n * @param combiningOp - Optional. Specifies how to combine values for the property, such as \"incr\" for increment.\n * @returns The annotate op\n */\nexport function createAnnotateRangeOp(start, end, props, combiningOp) {\n  return {\n    combiningOp,\n    pos1: start,\n    pos2: end,\n    props,\n    type: 2 /* ANNOTATE */\n  };\n}\n/**\n * Creates the op to remove a range and puts the content of the removed range in a register\n * if a register name is provided\n *\n * @param start - The inclusive start of the range to remove\n * @param end - The exclusive end of the range to remove\n * @param register - Optional. The name of the register to store the removed range in\n */\nexport function createRemoveRangeOp(start, end, register) {\n  return {\n    pos1: start,\n    pos2: end,\n    register,\n    type: 1 /* REMOVE */\n  };\n}\n/**\n *\n * @param pos - The position to insert the segment at\n * @param segment - The segment to insert\n */\nexport function createInsertSegmentOp(pos, segment) {\n  return createInsertOp(pos, segment.toJSONObject());\n}\nexport function createInsertOp(pos, segSpec) {\n  return {\n    pos1: pos,\n    seg: segSpec,\n    type: 0 /* INSERT */\n  };\n}\n/**\n *\n * @param pos - The position to insert the register contents at\n * @param register - The name of the register to insert the value of\n */\nexport function createInsertFromRegisterOp(pos, register) {\n  return {\n    pos1: pos,\n    register,\n    type: 0 /* INSERT */\n  };\n}\n/**\n *\n * @param start - The inclusive start of the range to insert into the register\n * @param end - The exclusive end of the range to insert into the register\n * @param register - The name of the register to insert the range contents into\n */\nexport function createInsertToRegisterOp(start, end, register) {\n  return {\n    pos1: start,\n    pos2: end,\n    register,\n    type: 0 /* INSERT */\n  };\n}\n/**\n *\n * @param ops - The ops to group\n */\nexport function createGroupOp(...ops) {\n  return {\n    ops,\n    type: 3 /* GROUP */\n  };\n}\n//# sourceMappingURL=opBuilder.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}