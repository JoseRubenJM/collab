{"ast":null,"code":"import _asyncToGenerator from \"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { AttachState } from \"@fluidframework/container-definitions\";\nimport { generateHandleContextPath } from \"@fluidframework/runtime-utils\";\nexport class FluidObjectHandle {\n  /**\n   * Creates a new FluidObjectHandle.\n   * @param value - The IFluidObject object this handle is for.\n   * @param path - The path to this handle relative to the routeContext.\n   * @param routeContext - The parent IFluidHandleContext that has a route to this handle.\n   */\n  constructor(value, path, routeContext) {\n    this.value = value;\n    this.path = path;\n    this.routeContext = routeContext;\n    // This is used to break the recursion while attaching the graph. Also tells the attach state of the graph.\n    this.graphAttachState = AttachState.Detached;\n    this.absolutePath = generateHandleContextPath(path, this.routeContext);\n  }\n  get IFluidHandle() {\n    return this;\n  }\n  get isAttached() {\n    return this.routeContext.isAttached;\n  }\n  get() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.value;\n    })();\n  }\n  attachGraph() {\n    // If this handle is already in attaching state in the graph or attached, no need to attach again.\n    if (this.graphAttachState !== AttachState.Detached) {\n      return;\n    }\n    this.graphAttachState = AttachState.Attaching;\n    if (this.bound !== undefined) {\n      for (const handle of this.bound) {\n        handle.attachGraph();\n      }\n      this.bound = undefined;\n    }\n    this.routeContext.attachGraph();\n    this.graphAttachState = AttachState.Attached;\n  }\n  bind(handle) {\n    // If the dds is already attached or its graph is already in attaching or attached state,\n    // then attach the incoming handle too.\n    if (this.isAttached || this.graphAttachState !== AttachState.Detached) {\n      handle.attachGraph();\n      return;\n    }\n    if (this.bound === undefined) {\n      this.bound = new Set();\n    }\n    this.bound.add(handle);\n  }\n}\n//# sourceMappingURL=fluidHandle.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}