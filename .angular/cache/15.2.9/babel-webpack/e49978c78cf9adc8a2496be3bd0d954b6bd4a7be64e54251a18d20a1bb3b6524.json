{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nvar _asyncToGenerator = require(\"/Users/jose/Desktop/proyects/fluid-angular/FluidAngular/collaborative-textarea/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MockDeltaManager = exports.MockDeltaQueue = void 0;\nconst events_1 = require(\"events\");\nconst common_utils_1 = require(\"@fluidframework/common-utils\");\n/**\n * Mock implementation of IDeltaQueue for testing that does nothing\n */\nclass MockDeltaQueue extends events_1.EventEmitter {\n  constructor() {\n    super();\n    this.queue = [];\n    this.pauseCount = 0;\n    this.processCallback = () => {};\n  }\n  get disposed() {\n    return undefined;\n  }\n  get paused() {\n    return this.pauseCount !== 0;\n  }\n  get length() {\n    return this.queue.length;\n  }\n  get idle() {\n    return this.queue.length === 0;\n  }\n  process() {\n    void Promise.resolve().then(() => {\n      while (this.pauseCount === 0 && this.length > 0) {\n        const el = this.pop();\n        (0, common_utils_1.assert)(el !== undefined, \"this is impossible due to the above length check\");\n        this.processCallback(el);\n      }\n    });\n  }\n  push(el) {\n    this.queue.push(el);\n    this.emit(\"push\", el);\n    this.process();\n  }\n  pop() {\n    return this.queue.shift();\n  }\n  pause() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.pauseCount++;\n      return;\n    })();\n  }\n  resume() {\n    this.pauseCount--;\n    this.process();\n  }\n  peek() {\n    return this.queue[0];\n  }\n  toArray() {\n    return this.queue;\n  }\n  dispose() {}\n  waitTillProcessingDone() {\n    return _asyncToGenerator(function* () {\n      throw new Error(\"NYI\");\n    })();\n  }\n}\nexports.MockDeltaQueue = MockDeltaQueue;\n/**\n * Mock implementation of IDeltaManager for testing that creates mock DeltaQueues for testing\n */\nclass MockDeltaManager extends common_utils_1.TypedEventEmitter {\n  constructor() {\n    super();\n    this.readOnlyInfo = {\n      readonly: false\n    };\n    this.clientType = undefined;\n    this.clientDetails = undefined;\n    this._inbound = undefined;\n    this._inboundSignal = undefined;\n    this._outbound = undefined;\n    this.minimumSequenceNumber = 0;\n    this.lastSequenceNumber = 0;\n    this.lastKnownSeqNumber = 0;\n    this.initialSequenceNumber = 0;\n    this.hasCheckpointSequenceNumber = false;\n    this._inbound = new MockDeltaQueue();\n    this._outbound = new MockDeltaQueue();\n    this._inboundSignal = new MockDeltaQueue();\n  }\n  get disposed() {\n    return undefined;\n  }\n  get IDeltaSender() {\n    return this;\n  }\n  get inbound() {\n    return this._inbound;\n  }\n  get outbound() {\n    return this._outbound;\n  }\n  get inboundSignal() {\n    return this._inboundSignal;\n  }\n  get version() {\n    return undefined;\n  }\n  get maxMessageSize() {\n    return 0;\n  }\n  get serviceConfiguration() {\n    return undefined;\n  }\n  get active() {\n    return true;\n  }\n  close() {}\n  submitSignal(content) {}\n  flush() {}\n  submit(type, contents, batch = false, localOpMetadata) {\n    return 0;\n  }\n  dispose() {}\n}\nexports.MockDeltaManager = MockDeltaManager;\n//# sourceMappingURL=mockDeltas.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}